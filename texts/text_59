Алгоритм доставки страничных нарушений в мониторе виртуальных машин

Полносистемные эмуляторы эмулируют всё аппаратное обеспечение и позволяют запускать ОС без внесения изменений. Гипервизоры первого типа работают на аппаратуре, второго — требуют поддержки ОС. Рассмотрим только первый тип и эмуляцию x86-64 на ARM. Целью работы является улучшение алгоритма доставки страничных нарушений в таких гипервизорах.
Была проведена классификация страничных нарушений по источнику: возникающие из-за MMIO, защиты гостевого кода, гостевой ОС, теневой таблицы страниц . Была добавлена эмуляция грязного бита и поддержка больших страниц.
Грязный бит — флаг в записи таблицы страниц, обозначающий наличие несохранённой записи. Он аппаратно поддерживается в x86-64, но не в ARM. Грязный бит полезен для улучшения алгоритмов управления памятью внутри ОС, оптимизации кэша и сброса страниц на жёсткий диск.
Linux эмулирует его, используя механизм страничных нарушений . В этой работе использован аналогичный подход. Добавлен новый тип нарушений: связанных с эмуляцией грязного бита. Написан его обработчик.
В аппарате управления памяти многоуровневая трансляция адресов ускоряется кэшем TLB. Однако при множестве обращений к области памяти он быстро переполняется. Большие страницы снижают нагрузку на TLB для доступов к непрерывным частям памяти. Множество записей стандартных страниц заменяются на одну.
Динамическая двоичная трансляция характеризуется блочным преобразованием кода гостевой архитектуры в код основной во время работы транслятора. Любое изменение страницы с гостевым кодом отслеживается для изменения трансляции. Для этого доступ на запись к ней запрещаются.
При таком подходе доступы на запись, не изменяющие код, тоже вызывают страничные нарушения. Число таких обращений существенно возрастёт при использовании больших страниц. Поэтому, если на них появляется гостевой код, они должны быть разбиты на стандартные. Страницы, содержащие область MMIO, аналогично должны быть разделены.
В архитектурах x86-64 и ARM есть аппаратная поддержка больших страниц. Для её использования необходимо учесть необходимость разделения. В ходе работы был изменён код, управляющей теневой таблицей страниц, в том числе обработчик её страничных нарушений.
Модифицированный эмулятор был протестирован на SPEC CPU2006 .
Достигнуто повышение производительности до 85%.
