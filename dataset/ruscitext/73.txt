lingcorpora: СОЗДАНИЕ API ДЛЯ ЯЗЫКОВЫХ КОРПУСОВ

1 Введение
Многие лингвистические исследования базируются на корпусных данных, поэтому быстрый доступ к ним важен для исследователей. Например, при проведении типологических исследований может понадобиться обратиться сразу к нескольким корпусам с большим количеством запросов. Делать это вручную — длительный процесс.
Корпуса во многом различаются: в некоторых отсутствует возможность скачать выдачу, в других нет возможности ограничить количество примеров, иногда морфологические теги скрыты. Пакет lingcorpora предоставляет пользователям доступ к корпусам и позволяет добавлять и настраивать параметры выдачи, а также сохранять её в удобном для пользователя формате, не заходя на сайты корпусов. Полученные данные можно использовать для дальнейшей обработки данных путём подключения различных инструментов обработки естественного языка. 
На данный момент существуют R-версия пакета (разрабатывается Г. А. Морозом) и Python-версия, проблемы разработки которой и описаны в данной рабо-те.В Python-версии пакета реализован поиск по Национальному Корпусу Польского Языка (далее NKJP), Национальному Корпусу Русского Языка (далее НКРЯ) и Das Wortaus- kunftssystem zur deutschen Sprache in Geschichte und Gegenwart (DWDS). Также Катя Герасименко написала функцию для Center of Chinese Linguistics Corpus (CCLC), Георгий Алексеевич Мороз в R-версии пакета написал функции для аварского и абхазского корпусов. Корпуса из R-версии будут в ближайшее время включены в Python-версию, планируется добавить и другие корпуса, например, RuTenTen, ГИКРЯ, Aranta, DeReKo и тд. 2 Описание пакета Для достижения основной цели пакета — создание API для различных лингвистических корпусов — было решено создать несколько одинаковых функций, по функции на каждый корпус. В настоящий момент доступны функции pol_search — поиск в NKJP, rus_search — поиск в НКРЯ и deu_search — поиск в DWDS. Функция pol_search поддерживает все аргументы, rus_search — все, кроме аргумента tag, но в скором времени поддержка этого аргумента будет реализована. Названия функций устроены одинаково – в них фигурирует iso-код языка корпуса.
Для работы функций используется фиксированный набор аргументов для того, чтобы облегчить автоматизацию запросов. Всего используется шесть аргументов, одинаковых для R- и Python-версий: 
• query – запрос, на вход принимается строка (допустимо использование регулярных выражений, если они разрешены корпусом) 
• corpus – подкорпус, по умолчанию стоит основной корпус, на вход принимается строка 
• tag – демонстрация морфологических тегов (пока что работает только в НКПЯ), на вход принимаются логические операторы True/False (по умолчанию False) 
• n_results – количество результатов в выдаче, на вход принимается число (по умолчанию 10) 
• kwic – режим key word in context, на вход принимаются логические операторы True/False (по умолчанию True) 
• write – запись в .csv, на вход принимаются логические операторы True/False (по умолчанию False) 
Как видно из списка выше, многие аргументы содержат значения по умолчанию. Это сделано для того, чтобы пользователь мог использовать только нужные в данный момент аргументы. К тому же, это существенно ускоряет работу самой функции. Возможно, при добавлении новых корпусов, список аргументов будет несколько меняться, чтобы можно было создать универсальный набор аргументов, который не отражал бы специфику конкретных корпусов.
Приведем пример запроса функции pol_corpus():
lingcorpora.pol_search(query = 'tata', write = True)
Данный запрос должен выполнить следующее: найти лексему ‘tata’ и записать результаты в файл (поскольку другие аргументы не указаны, они сохраняют значения по умолчанию). Результат работы программы представлен в табл. 1. 3 Проблемы при создании API Основные проблемы, с которыми пришлось столкнуться во время разработки, относятся к архитектуре различных корпусов. Во всех рассмотренных корпусах нет возможности скачать выдачу в удобном для пользователя формате либо функции скачивания нет вообще. Например, в НКРЯ можно скачать выдачу только в XML (и только 1000 примеров, регулировать их количество нельзя), а в NKJP и DWDS такой возможности вообще нет. Эту проблему частично решает созданный инструмент.
Другая проблема — использование JavaScript в архитектуре корпусов. Наличие JS сильно усложняет парсинг. Например, в Чешском Национальном Корпусе (см. https://www.korpus.cz) и в Английско-Китайском параллельном корпусе (см. http://www.jukuu.com) используется JS для генерации KWIC-выдачи. Также усложняет работу отсутствие некоего ”режима для разработчика-̈– облегченной версии сайта или даже возможности задавать запросы напрямую в базу и получать оттуда результаты, минуя промежуточные преобразования в html оболочку. Такая версия сайта среди рассматриваемых корпусов есть только в НКРЯ, что позволяет извлекать морфологические теги. При отсутствии такой версии у корпусов, которые используют JS, процесс парсинга сильно усложняется, поскольку на веб-странице с выдачей все теги находятся в JS-окне.
Морфологическая разметка также есть не везде: среди рассматриваемых корпусов такой уровень разметки есть только в NKJP и в НКРЯ: в DWDS, например, разметка отсутствует полностью. Еще одним немаловажным различием является отсутствие работы с регулярными выражениями. Например, в DWDS их нет совсем, а в НКРЯ и NKJP язык регулярных выражений несколько различается. К примеру, для того чтобы найти слово, начинающееся на букву д/d, в НКРЯ запрос должен выглядеть следующим образом: в НКРЯ — д*, в NKJP — d.*. Такие различия также мешают унификации запросов, т.к. пользователю все равно придется разбираться в системе регулярных выражений отдельно для каждого корпуса.
Стоит заметить, что из-за отсутствия унификации на уровне выдачи извлечение информации, отличной от выдачи (метатекстовая, перевод и тд.) сильно затруднено. Возможно, что при использовании унифицированного шаблона (см. van Gompel and Reynaert [2013]), извлечение такой информации не представляло бы никаких проблем. 
4 Заключение
Созданный в результате работы пакет позволяет работать с корпусами НКРЯ, NKJP и DWDS, интегрировать результаты работы в различные исследовательские программы. Количество корпусов, доступных для обработки будет расширяться в дальнейшем. Возможность дальнейшей обработки результатов с использованием многофункционального пакета Pandas существенно расширяет рамки использования пакета, возможность сохранения результатов облегчает работу с данными. Кроме того, пакет хорошо вписывается в парадигму воспроизводимости научных исследований: если раньше процесс сбора данных из корпусов являлся отдельной задачей, то теперь при помощи пакета lingcorpora этот процесс можно интегрировать в получающие все большую популярность интерактивные документы, показывающие ход эксперимента. С интеграцией и автоматизацией сбора корпусного материала также легко связать инструменты обработки естественного языка, например, разного рода парсеры.
Также разработка проекта была бы существенно облегчена, если бы все корпуса поддерживали некоторый единый шаблон представления лингвистических примеров. Такой шаблон предлагается, например, в работе van Gompel and Reynaert [2013], и представляет собой многослойную XML-разметку. Некоторые лингвистические программы, такие как ELAN и Fieldworks SIL, также предоставляют возможность экспорта в формате XML-шаблонов, переводимых один в другой. Если бы тот или иной шаблон с множеством полей (скрытых от пользователя, в случае, если они не заполнены) использовался в большинстве корпусов, процесс сбора языковых данных был бы значительно облегчен, а получаемые результаты легко было бы сводить друг с другом и группировать в новую базу. Кроме того, такой шаблон позволил бы впоследствии переходить к созданию некоторой объединенной базы многоязычного корпуса.

В этой статье описаны результаты разработки инструмента для унифицированного корпоративного доступа: пакета lingcorpora Python. Пакет предоставляет доступ к различным языковым корпусам, используя единую архитектуру функций. В статье описывается фиксированный набор аргументов для работы функций, использующийся для облегчения автоматизации запросов. Также рассказывается о проблемах, связанных с ограничениями конкретных корпусов (таких как количество примеров на странице, количество страниц, ограничения на поддержку ключевого слова в контекстном формате, ограничения на загрузку результатов), которые позволяет решить разработанный пакет. Рассказывается о возможности интеграции результатов работы пакета в различные исследовательские программы, например в интерактивные документы, показывающие ход эксперимента и в инструменты обработки естественного языка. Упоминается желательность внедрения в языковые корпуса поддержки единого шаблона представления лингвистических примеров. 