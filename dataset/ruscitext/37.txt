Аппаратная реализация реконфигурируемого на лету БЧХ декодера

Введение
Задача аппаратной реализации каких-либо устройств с одной стороны сугубо инженерная, но с другой стороны опирается на фундаментальные результаты теории синтеза управляющих систем. Среди последних работ по этой теории можно выделить [1–19]. Если устройство надо реализовать в виде чипа, то управляющая система, моделирующая чип, — это конечный автомат. Последние работы по теории автоматов можно найти в [20–50]. Фактически задача реализации устройства в виде чипа — это задача синтеза структурного автомата с заданным функционированием. Обзор результатов по этим направлениям можно найти в статье В.Б.Кудрявцева [51]. Помехоустойчивые коды имеют широкий диапазон применений в системах оптической и беспроводной связи, в магнитной записи, в системах хранения данных и т.д. Некоторые последние работы по теории кодирования опубликованы в [52–60].
Бинарные БЧХ коды представляют собой мощный класс помехоустойчивых кодов. При систематическом БЧХ кодировании информационные биты дополняются проверочными битами, и полученная последовательность бит образует кодовые слова. Каждый двоичный БЧХ код с полем расширения GF (2m ) определяется длиной кодового слова n и максимальным числом исправляемых ошибок t. Если в канале связи происходит не более t ошибок, то БЧХ декодер может восстановить исходное кодовое слово.
Большинство аппаратных реализаций БЧХ декодеров имеют дело с фиксированной длиной кодового слова и фиксированным числом исправляемых ошибок. Это означает, что эти параметры фиксируются во время создания экземпляра декодера и не могут быть изменены во время выполнения. Однако в современных системах хранения данных, таких как контроллеры флэшпамяти и во многих других системах требуется поддерживать множество различных длин кодового слова и максимальных чисел исправляемых ошибок в одной конструкции. БЧХ декодеры, используемые в контроллерах таких систем, должны быть конфигурируемыми и время реконфигурации должно быть как можно меньше.
В данной работе мы предлагаем новую реконфигурируемую на лету аппаратную схему БЧХ декодера. Это означает, что изменение конфигурации в этой конструкции может быть сделано за константное число тактов, независящее от длины кодового слова и числа исправляемых ошибок. Данное решение защищено патентом США [61]. 
Типичное решение
Схема типичной аппаратной реализации БЧХ декодера показана на рис. 1. Декодирование состоит из трех этапов: вычисления синдрома, решения ключевого уравнения и коррекции ошибок. Если этапы реализованы на аппаратном уровне, модуль вычисления синдрома (Syndrome Calculation, SC), получает кодовое слово символ за символом и множество вычисленных синдромов передает модулю решения ключевых уравнений (Key Equation Solver, KES). Модуль KES вычисляет полином локаторов ошибок, корнями которого являются позиции ошибок. Для решения ключевых уравнений часто используют алгоритм Берликемпа-Мэсси (Berlekamp-Massey algorithm, BMA). Модуль KES передает полином локаторов ошибок модулю коррекции ошибок (Error Correction, EC). Входные данные также поступают на модуль FIFO (очередь), который сохраняет данные до их использования в модуле EC. В модуле FIFO может помещаться до двух кодовых слов. На выходе модуля ЕС получается исправленное кодовое слово. Двоичный выход "fail"модуля EC устанавливается в 1, если число исправленных бит больше, чем максимальное возможное число ошибок. 
Конфигурируемый БЧХ декодер 
Большинство реализаций БЧХ декодеров не позволяют пользователю изменять параметры БЧХ кода, такие как максимальное число ошибок и длина кодового слова. Однако современные приложения кодов БЧХ в контроллерах твердотельных дисков (solid-state disk, SSD) делают необходимым изменение этих параметров во время функционирования. При этом, чтобы достичь быстрой скорости время изменения конфигурации такого контроллера должен быть как можно меньше. Поэтому реконфигурируемые декодеры должны иметь специальный вход (см. рис. 2) под названием "Данные конфигурации". Он состоит из пары (n0, t0 ), где n0 — текущая длина кодового слова, t0 — текущее максимальное число исправляемых ошибок.
Для того, чтобы понять основную задачу в реализации реконфигурируемых БЧХ декодеров мы должны объяснить алгоритм декодирования БЧХ более подробно. Вход БЧХ декодера есть кодовое слово (cn−1 , . . . , c0 ), где каждый символ ci ∈ {0, 1}. Мы будем рассматривать его также как полинома кодового слова c(x) = cn−1 xn−1 + . . . + c1 x + c0 . Этот полином используется модулем SC, который вычисляет 2t синдромов S1 , S2 , . . . , S2t следующим образом: Si , где t — максимальное число ошибок, которое БЧХ код может исправить, а α — примитивный элемент поля расширения GF (2m ), связанного с этим кодом БЧХ. В этом случае длина кодового слова равна n = 2m − 1. Затем эти синдромы приходят к модулю KES, который с помощью алгоритма решения ключевых уравнений (например, BMA) производит полином локаторов ошибок Λ(x). Затем модуль EC, используя Λ(x), корректирует позиции ошибок в кодовом слове, задержанном модулем FIFO, и сообщает о неудаче, если количество ошибок больше, чем максимально возможное число ошибок t.
Не трудно изменить схему 1, так чтобы она могла обрабатывать БЧХ коды с числом ошибок t0 < t. Единственное отличие состоит в том, что KES блок должен выполнять 2t0 итераций вместо 2t. Но если мы хотим использовать БЧХ код с другой длиной n0 < n, то мы должны использовать усеченные коды БЧХ. Это означает, что вместо кодового слова полной длины (cn−1 , . . . , c0 ) на вход БЧХ декодера будет поступать усеченное кодовое слово (cn0 −1 , . . . , c0 ), которое можно рассматривать как кодовое слово полной длины (cn0 −1 , . . . , c0 , 0 . . . , 0) или в полиномиальной форме c(x) = x∆n c0 (x). Следовательно, если мы будем использовать стандартную схему для вычисления синдромов то она вместо синдромов Si произведет значения Si0 = c0 (αi ). Основная проблема состоит в том, что ∆n зависит от параметра конфигурации n0 — текущей длины кодового слова, и значения α∆n , α2∆n , . . . , α2t∆n не могут быть вычислены за небольшое фиксированное число тактов, поскольку величина ∆n может быть очень большой.
Основная идея данной работы заключается в вычислении значения α∆n одновременно с вычислением синдромов, а затем последовательном выполнении умножений, по мере того как значения S1 , S2 , . . . , S2t используются в KES блоке. Так что для того, чтобы вычислить α−n , мы можем использовать константный умножитель в поле GF (2m ), который выполняет умножение на α−1 . Модуль, который выполняет эти вычисления, называется Альфа Калькулятором (Alpha Calculator, AC) и реализован, как показано на рис. 3. Если сигнал start = 1, то вычисления запускаются. Модуль AC работает одновременно с модулем (см. рис. 2) и в конце вычислений он производит значение α−n .
После того, как значение α−n получено, оно идет к KES блоку (см. рис.2). В нашей реализации модуля KES значения синдромов S1 , S2 , . . . , S2t используются последовательно. На первой итерации используется только S1 , на второй — только S1 , S2 , и т.д. Поэтому, мы имеем достаточно времени, чтобы вычислить все значения S1, S2t , используя только два умножителя в поле GF (2 ), как показано на рис. 4. На этом рисунке сигнал "start"выводится из блока SC и если start = 1, то это означает, что модули SC и AC закончили свои расчеты и модуль KES должен начать работать.

В статье предлагается архитектура реконфигурируемого на лету аппаратного БЧХ декодера. Современные приложения кодов БЧХ делают необходимым изменение параметров, таких как максимальное число ошибок и длина кодового слова, во время функционирования. Основная идея в вычислении значения по стандартной схеме одновременно с вычислением синдромов, а затем их последовательном умножении, по мере использования в KES блоке.