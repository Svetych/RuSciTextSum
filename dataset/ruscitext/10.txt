Android как платформа для разработки корпоративных приложений на примере CRM

Введение
В данной статье рассматривается реализация CRM-системы для платформы Android. Система должна позволять управлять клиентами, контактными лицами и контактами. Примерами контактов могут служить звонки, встречи, выставки, смс, письма. Кроме того, контакты могут быть как входящими, так и исходящими. Под контактными лицами понимаются сотрудники клиентов. Система должна обеспечивать доступ к описанным сущностям и возможность быстрого перехода между связанными сущностями при помощи механизма фильтров. 
Наряду с описанием интерфейса в статье описывается механизм хранения данных и синхронизации данных с серверной частью. 
Постановка задачи и полученные результаты
Необходимо реализовать CRM-систему, позволяющую добавлять и редактировать информацию по клиентам, контактным лицам клиентов и контактам с клиентами. Должна быть проработана навигация между ключевыми разделами CRM. Должен быть обеспечен быстрый переход между сущностями системы через механизм фильтров. Система должна предоставлять надёжную синхронизацию данных с сервером.
В результате решения описанных задач реализована CRM-система для платформы Android с простой навигацией как между разделами, так и между списками и карточками. Разработан механизм фильтрации связанных сущностей, сохранение измененной информации на лету. Реализована синхронизация данных с сервером, что позволяет работать с системой нескольким пользователям с разных устройств. 
Описание интерфейса
Интерфейс приложения разработан так, чтобы максимально облегчить навигацию между списками и карточками. Из карточки любой сущности можно перейти непосредственно к связанным с ней сущностям, например, из карточки контактного лица (рис. 1) сразу перейти к контактам с этим контактным лицом (рис. 2). 
Навигация
Навигация по разделам приложения осуществляется при помощи табов вверху экрана. При выборе одного из табов строка с разделами центрируется так, чтобы можно было перейти к предыдущему и следующему разделу (рис. 3). Навигация внутри разделов осуществляется свайпом (swipe — проводить не отрывая, скользить) вправо или влево. 
Список
Каждый раздел содержит список, который можно прокручивать вверх и вниз (рис. 4). Каждый элемент списка содержит информацию о сущности раздела (в данном случае, информацию о клиенте). При нажатии на элемент списка происходит переход к карточке. 
Карточка
Каждый раздел содержит карточку с информацией о сущности раздела. Любое поле карточки можно редактировать на лету(рис. 5). При нажатии на кнопку «Назад» происходит возврат к списку. 
Фильтры
Фильтры позволяют выбрать ту и только ту информацию, которая необходима в данный момент (рис. 2). Установить фильтр можно нажатием соответствующей кнопки в карточке, при этом приложение перейдёт к списку с уже выставленным фильтром. Удалить фильтр можно кнопкой рядом с названием фильтра или же кнопкой сброса всех фильтров в экшнбаре (англ. ActionBar) справа. 
Реализация интерфейса
При реализации интерфейса задействован компонент Android ViewPager. Кроме того, использовано боковое меню (Navigation Drawer). Само приложение реализовано на одном экране (Activity) с использованием фрагментов. Загрузка данных из БД происходит асинхронно (AsyncTaskLoader), что положительно сказывается на отзывчивости интерфейса. 
Навигация
Навигация между разделами реализована кнопками RadioButton, а навигация внутри раздела, между списком и карточкой, реализована компонентом ViewPager.
Для навигации по приложению используется стек, описанный в утилитарном классе по управлению параметрами приложения — Preferences. Стек содержит элементы, представляющие собой пары значений — раздел и страницу в разделе.
Добавление раздела и страницы в стек происходит при переходе к другому разделу, при этом в качестве идентификатора раздела используется идентификатор кнопки этого раздела, а в качестве страницы — индекс элемента в компоненте ViewPager. Кроме того, класс Preferences реализован как синглтон (англ. Singleton) для доступа к единственному его экземпляру из любой точки приложения.
Для того, чтобы при нажатии на кнопку «Назад» не происходил выход из приложения, а осуществлялся возврат к предыдущему разделу, событие onBackPressed переопределено. В обработчике события стек проверяется на пустоту и, если там есть элементы, верхний элемент выталкивается и происходит переход к разделу, а потом к странице в данном разделе. Если же стек пуст, происходит выход из приложения. 
Список
Списки реализуются простым классом, расширяющим BaseAdapter с ViewHolder’ом для ускорения его работы. Загрузка данных в список осуществляется через AsyncTaskLoader в котором, при необходимости, данные фильтруются перед тем, как фрагмент со списком их получит. Так как после того, как фрагменты в компоненте ViewPager уже созданы, метод onResume больше не вызывается. Для обновления данных в списке (например, если один из элементов был удалён в карточке) переопределён метод фрагмента setUserVisibleHint. В обработчике этого события устанавливается заголовок экшнбара, а также перегружается список в том случае, если что-то было изменено в карточке. 
Карточка
Карточка реализована в виде редактируемых полей, которые позволяют изменять данные на лету. Обновление данных в карточке происходит аналогично тому, как обновляются данные в списке. 
Фильтры
Фильтры реализуются с использованием SharedPreferences. В утилитарном классе Preferences содержатся методы для сохранения, удаления и получения фильтров. Это позволяет из любой точки приложения управлять фильтрами даже при возвращении в приложение после выхода. Кроме того, это работает быстрее, чем если бы фильтры хранились в БД.
В классах, расширяющих AsyncTaskLoader, помимо загрузки данных из БД реализована и их фильтрация. Если в базе данных имеются записи, то выполняется проход по ним, в ходе которого проверяется наличие определённых фильтров.
Далее проверяется соответствие этим фильтрам записей из БД. Если запись не соответствует хотя бы одному фильтру, она отсекается. Если же запись соответствует всем фильтрам то она добавляется в список.
Если установлены какие-то из фильтров, то после загрузки данных в список посредством AsyncTaskLoader эти данные отображаются вверху списка. В реализации метода onLoadFinished интерфейса LoaderCallbacks проверяется наличие определённых фильтров и в зависимости от их наличия отображаются или скрываются вьюшки соответствующих фильтров. 
Синхронизация
Данные хранятся и изменяются в локальной БД. Поэтому довольно важным оказывается вопрос синхронизации этих данных с сервером. Синхронизация происходит по протоколу REST API. В качестве формата передачи данных используется JSON. 
Хранение данных
Сохранение данных в карточке происходит при потере фокуса каким-либо из полей:
Для сохранения данных после потери фокуса, что происходит не только когда другое поле получает фокус, но и когда происходит переход к другому фрагменту, вызывается метод для сохранения в БД. В этом методе создаётся экземпляр сохраняемого класса (в данном случае класса Client) и заполняются его поля. 
Класс также помечается как не синхронизированный для дальнейшей его синхронизации, после чего вызывается метод execute унаследованного от AsyncTask класса для асинхронного сохранения класса в БД.
Синхронизация с сервером
Для синхронизации данных сервером используется несложный REST-клиент, реализованный на основе класса HttpURLConnection (который пришел на замену устаревшему классу DefaultHttpClient)
SimpleRestClient rc = new SimpleRestClient();
Данные передаются в form-urlencoded виде, о чём свидетельствует передаваемый на сервер заголовок "Content-Type". 
Далее формируется запрос в зависимости от наличия данных в передаваемом на сервер классе. 
Далее, в зависимости от наличия идентификатора записи, вызывается один из методов put или post. Это обусловлено тем, что если класс ещё не содержит идентификатор записи, он отправляется как новый, если же содержит, то как обновление данных.
Серверная сторона возвращает изменённый или созданный класс в формате json, после чего десереализуется в экземпляр класса.
Заключение
В результате проделанной работы реализована CRM-система для платформы Android. Реализована навигация, как между разделами, так и между списками и карточками. Разработана система фильтров. Сохранение измененной информации происходит на лету, что позволяет пользователю не беспокоиться о сохранности введённых данных. Кроме того, реализована синхронизация данных с сервером, что позволяет работать с системой нескольким пользователям с разных устройств.

Рассматривается реализация CRM-системы для платформы Android. Система позволяет управлять клиентами, контактными лицами и контактами. В статье описан интерфейс данной системы и его реализация, а также реализация синхронизации данных с серверной частью, что позволяет работать с системой нескольким пользователям с разных устройств.