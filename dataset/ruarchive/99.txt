в последние годы системы беспроводной связи справились с проблемой доставки надежной информации при обеспечении высокой пропускной способности. с этой проблемой часто сталкивались, прибегая к канальным кодам, способным исправлять ошибки даже при низком отношении сигнал/шум. как указано в таблице i в @xcite, несколько стандартов беспроводной связи используют двоичные или двубинарные турбо-коды @xcite и используют их превосходные возможности исправления ошибок. однако из-за высокой вычислительной сложности, требуемой для декодирования турбо-кодов, обычно использовались оптимизированные архитектуры (например, @xcite, @xcite xcite). кроме того, в нескольких работах рассматривалось распараллеливание архитектур турбо-декодеров для достижения более высокой пропускной способности. в частности, многие работы сосредоточены на том, чтобы избежать или уменьшить явление коллизии, возникающее при параллельных архитектурах (например, @xcite). хотя пропускная способность и площадь были доминирующими показателями, определяющими оптимизацию турбодекодеров, в последнее время потребность в гибких системах, способных поддерживать различные режимы работы или даже различные стандарты, изменила перспективу. в частности, так называемая парадигма программно-определяемого радио (sdr) сделала гибкость фундаментальным свойством будущих приемников, которые будут запрошены для поддержки широкого спектра разнородных стандартов. некоторые недавние работы (например, @xcite, @xcite, @xcite) посвящены реализации архитектур процессора с набором команд для конкретных приложений (asip) для турбодекодеров. для получения архитектур, обеспечивающих как высокую пропускную способность, так и гибкость, multi - asip является эффективным решением. таким образом, наряду с гибкими и высокопроизводительными элементами обработки, архитектура multi - asip должна также включать гибкую и высокопроизводительную магистраль межсоединений. с этой целью в сети - на - кристалле ( NOC ) подход был предложен для соединения вычислительных элементов в турбо архитектур декодер, предназначенный для поддержки нескольких стандартов @старайтесь, @старайтесь, @старайтесь, @старайтесь, @старайтесь, @предельно просто. Кроме того, архитектурам турбодекодеров на основе noc присуща адаптивная способность уменьшать полосу пропускания связи за счет подавления ненужного обмена внешней информацией. этого можно добиться, используя критерии надежности на уровне битов, при которых избегаются ненужные итерации для надежных битов @xcite.    в @xcite, @xcite, @xcite исследуются кольцевые, хордовые кольцевые и случайные графовые топологии, тогда как в @xcite предыдущие работы расширены до сетчатых и тороидальных топологий. кроме того, в @xcite изучаются топологии баттерфляй и Бенеша, а в @xcite рассматриваются бинарные топологии де- Брейна. однако ни в одной из этих работ не представлена единая структура для проектирования турбодекодера на основе noc, демонстрирующая возможные компромиссы между сложностью и производительностью. данная работа направлена на восполнение этого пробела и содержит два новых вклада в области гибких турбодекодеров: i) всестороннее исследование турбодекодеров на базе noc, проведенное с помощью специального симулятора noc; ii) список полученных результатов, показывающий компромиссы между сложностью и производительностью, предлагаемые различными топологиями, алгоритмы маршрутизации, архитектуры узлов и asip. статья структурирована следующим образом: в разделе [ sec : системный анализ] анализируются требования и характеристики архитектуры параллельного турбодекодера, тогда как в разделе [sec : noc ] вводится подход, основанный на noc. раздел [sec: топологии] обобщает топологии, рассмотренные в предыдущих работах, и представляет обобщенные топологии де-Брюйна и обобщенные топологии Каутца в качестве перспективных решений для архитектур турбодекодеров на основе noc. в разделе [sec : ra ] представлены три основных алгоритма маршрутизации, тогда как в разделе [sec : tnoc ] описана структура turbo noc. раздел [ sec : routing_algo_arch ] описывает архитектуру различных алгоритмов маршрутизации, рассмотренных в этой работе, раздел [ sec : результаты ] представляет экспериментальные результаты, а раздел [ sec : concl ] делает некоторые выводы. параллельный турбодекодер может быть смоделирован как элементы обработки @xmath0, которым необходимо считывать данные из памяти @xmath0 и записывать их в память @xmath0. каждый обрабатывающий элемент, часто называемый модулем soft - in - soft - out (siso), выполняет алгоритм bcjr @xcite, в то время как память используется для обмена внешней информацией @xmath1 между siso. процесс декодирования является итеративным, и обычно каждый siso последовательно выполняет алгоритм bcjr для двух составляющих кодов, используемых на стороне кодировщика; для получения дополнительной информации о модуле siso читатель может обратиться к @xcite. как следствие, каждая итерация состоит из двух половинных итераций, называемых чередованием и отменой чередования. в течение одной половины итерации внешняя информация, полученная siso @xmath2 во время @xmath3 ( @xmath4), отправляется в память @xmath5 в местоположении @xmath6, где @xmath7 и @xmath8 являются функциями @xmath2 и @xmath3, полученными из закона перестановки (@xmath9 или перемежителя), используемого в сторона энкодера. таким образом, время, необходимое для завершения декодирования, напрямую связано с количеством тактовых циклов, необходимых для завершения половины итерации. без потери общности мы можем выразить количество циклов, необходимых для завершения половины итерации ( @xmath10 ), как @xmath11, где @xmath12 - общее количество шагов решетки во фрейме данных, @xmath13 - количество шагов решетки, обработанных каждым siso, @xmath14 - скорость вывода siso, а именно количество шагов решетки, обработанных siso за такт, а @xmath15 - задержка структуры межсоединения. таким образом, пропускная способность декодера, выраженная как количество декодированных битов за время, необходимое для завершения процесса декодирования, равна @xmath16, где @xmath17 - тактовая частота, @xmath18 - количество итераций, @xmath19 для двоичных кодов и @xmath20 для двойных двоичных кодов. когда задержка структуры межсоединения пренебрежимо мала по отношению к количеству циклов, требуемому siso, мы получаем @xmath21 таким образом, для достижения целевой пропускной способности @xmath22 и удовлетворительной производительности с частотой ошибок следует использовать надлежащее количество @xmath23 итераций. минимальное значение @xmath0 ( @xmath24 ), удовлетворяющее @xmath22 с итерациями @xmath23, может быть оценено из ( [ eq : tapprox ] ) для некоторых архитектур asip, доступных в литературе. если мы рассмотрим @xmath25, как в @xcite, @xcite, @xmath0 варьируется в [ 5, 37 ] для достижения @xmath26 мб / с (см. таблицу [ tab : pasip ] ). стоит отметить, что значения @xmath27 в таблице [ tab : pasip ] представляют среднее количество циклов, требуемых siso для обновления программной информации одного бита (см. таблицу vi в @xcite и таблицу i в @xcite). более того, @xmath28 сильно зависит от внутренней архитектуры siso и в целом имеет тенденцию увеличиваться со сложностью кода. как следствие, несколько условий могут дополнительно увеличить @xmath0, а именно: 1 ) структуры межсоединений с большими @xmath15 ; 2 ) более высокие значения @xmath29; 3 ) более высокие @xmath22; 4 ) более высокие @xmath23; 5 ) более низкая тактовая частота. таким образом, мы считаем релевантным для исследования несколько более широкий диапазон для @xmath0: @xmath30..степень параллелизма, необходимая для получения @xmath26 мб / с для @xmath25 с некоторыми архитектурами asip, доступными в литературе [ cols=\"^,^,^,^,^,^,^ \", ] площадь и процентное соотношение на самом деле не равны нулю, но они незначительны по сравнению с вкладом im и lm в общую площадь. наиболее важные выводы, которые можно сделать из результатов, приведенных в таблицах [ tab : wimax_results ] и [ tab : mhoms_results ], следующие: 1. алгоритм маршрутизации asp - ft является наиболее эффективным решением как с точки зрения пропускной способности, так и площади при @xmath31. 2. накладные расходы на память маршрутизации алгоритма asp - ft (см. рис. [ рис. : узел ] ( б ) ) становится актуальным по мере уменьшения @xmath14, и решения ssp становятся лучшими решениями в основном для @xmath32 и @xmath33. 3. в большинстве случаев топологии с @xmath34=4 обеспечивают более высокую пропускную способность при меньших затратах на сложность, чем топологии с @xmath34=2 при @xmath35. 4. в большинстве случаев обобщенные топологии де-Брюйна и обобщенные топологии Каутца являются наиболее эффективными топологиями.    в качестве показательного примера на рис. [рис. r1_asp - ft ], мы показываем экспериментальные результаты, полученные с помощью алгоритма маршрутизации @xmath31 и asp - ft для перемежителя wimax с @xmath36 (а) и перемежителя с круговым сдвигом с @xmath37 (б). каждая точка представляет сквозной ввод и область, полученную для определенной топологии с помощью определенная степень параллелизма @xmath0. результаты, относящиеся к одному и тому же значению @xmath0, помещаются в одно и то же поле, и каждой точке присваивается метка, чтобы выделить соответствующую топологию, а именно топологии идентифицируются как r - кольцо, h - сотовая структура, t - тороидальная сетка, k - обобщенный каутц с соответствующим значением @xmath34 ( k2, k3, к4 ). как можно заметить, обобщенные топологии Каутца с @xmath38 ( k4) всегда являются лучшими решениями для достижения высокой пропускной способности при минимальных затратах на площадь.    на рис. [ рис. : tar_tot ] значимые результаты, извлеченные из таблиц [ tab : wimax_results ] и [ tab : mhoms_results ], показаны в графическом виде. в частности, для @xmath31 алгоритм маршрутизации asp - ft является наилучшим решением, тогда как для @xmath39 алгоритмы маршрутизации ssp, реализованные, как показано на фиг. [ рис. : узел ] ( c ), как правило, достигают той же производительности, что и алгоритм маршрутизации asp - ft, с меньшими накладными расходами на сложность (см. рис. [ рис. : tar_tot ] ( a ) и ( b ) для перемежителя wimax, @xmath36 и рис. [ рис. : tar_tot ] ( c ) и ( d ) для перемежителя с круговым сдвигом, @xmath37 ). интересным явлением, возникающим при увеличении размера перемежителя, является насыщение производительности, которое можно наблюдать в таблице [ tab : mhoms_results ] для топологий @xmath40, а именно, пропускная способность имеет тенденцию к насыщению и увеличению @xmath14 приводит к увеличению площади с незначительным увеличением или даже с уменьшением пропускной способности. в качестве примера приведем обобщенную топологию Каутца с @xmath41 и asp - ft алгоритм маршрутизации достигает скорости более 180 Мбит / с с @xmath31, @xmath42, @xmath43. однако решение с наименьшей площадью - это решение, полученное с помощью @xmath43. сглаживание пропускной способности топологий с низким значением @xmath34 можно объяснить наблюдением, что высокие значения @xmath14 имеют тенденцию насыщать сеть. кроме того, высокие значения @xmath14 удлиняют входные fifo, как показано в таблице [ вкладка : процент ], где общая площадь сети указана в виде разбивки на строительные блоки, а именно входные fifo, поперечные полосы (cb), выходные регистры, алгоритм маршрутизации / память (ra / m ), память идентификатора (im ) и память местоположения (lm ) приведены для некоторых важных случаев: точки наибольшей пропускной способности (светло - серый ), наибольшей площади (средне - серый ) и наименьшей площади (темно - серый ) для каждого значения @xmath34 в таблице [ вкладка : mhoms_results ]. в этой работе была представлена общая структура для проектирования сети на основе архитектур турбодекодеров на основе чипов. предлагаемая структура может быть адаптирована для изучения различных топологий, степеней параллелизма, скорости ввода сообщений и алгоритмов маршрутизации. экспериментальные результаты показывают, что обобщенные топологии де- Брюйна и обобщенные топологии Каутца обеспечивают высокую пропускную способность при ограниченных затратах на сложность. более того, в зависимости от требований к целевой пропускной способности могут использоваться различные степени параллелизма, скорости передачи сообщений и алгоритмы маршрутизации для минимизации накладных расходов на область сети. 

в этой работе предлагается общая структура для проектирования и моделирования архитектур турбо-декодеров на основе чипов. исследуются несколько параметров в пространстве проектирования, а именно топология сети, степень параллелизма, скорость, с которой сообщения отправляются обрабатывающими узлами по сети, и стратегия маршрутизации. основными результатами этого анализа являются: i) наиболее подходящими топологиями для достижения высокой пропускной способности при ограниченных затратах на сложность являются обобщенные топологии де- Брюйна и обобщенные топологии Каутца; ii) в зависимости от требований к пропускной способности могут использоваться различные степени параллелизма, скорости передачи сообщений и алгоритмы маршрутизации для минимизации накладных расходов на область сети.