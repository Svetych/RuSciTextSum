рассмотрим сеть, которая эволюционирует при удалении и добавлении вершин. в каждую единицу времени мы добавляем вершину @xmath1 и удаляем вершины @xmath2. удаление вершины также подразумевает, что все ребра, падающие на эту вершину, исчезают, и, следовательно, количество вершин в конце этих ребер уменьшается. здесь @xmath2 можно интерпретировать как отношение удаленных вершин к добавленным, таким образом, @xmath3 представляет растущую сеть, @xmath4 - сокращающуюся, в то время как @xmath5 подразумевает оборот вершин, но фиксированный размер сети. уравнения, которые будут приведены ниже, представляют собой совершенно общий случай. однако для целей этой статьи мы будем специализироваться на сетях постоянного размера, поскольку предполагаем, что сеть уже существует, и мы хотели бы сохранить ее первоначальную структуру, уравновесив скорость атаки и скорость восстановления. пусть @xmath6 - доля узлов в сети, которые в данный момент времени имеют степень @xmath7. по определению, тогда она имеет нормализацию: @xmath8 в дополнение к этому мы хотели бы иметь свободу в отношении степени входящей вершины. пусть @xmath9 - распределение вероятностей, управляющее этим, с ограничением @xmath10. мы также должны рассмотреть, как вновь прибывающая вершина выбирает присоединение к другим вершинам, существующим в сети, и как вершина удаляется из нее. пусть @xmath11 - вероятность того, что данное ребро из нового узла соединено с узлом степени @xmath7, умноженная на общее количество узлов @xmath0. тогда @xmath12 - это вероятность того, что ребро из нового узла соединено с некоторым узлом степени @xmath7. аналогично, пусть @xmath13 - вероятность того, что данный узел со степенью @xmath7 выйдет из строя или будет атакован во время удаления одного узла, также умноженная на @xmath0. тогда @xmath14 - это общая вероятность удаления узла со степенью @xmath7 во время удаления одного узла. обратите внимание, что введение ядра удаления @xmath13 - это то, что отличает нашу модель от предыдущих моделей, описывающих процесс эволюции сети. поскольку каждое вновь присоединенное ребро переходит в некоторую вершину со степенью @xmath7, у нас есть следующие условия нормализации: @xmath15 вооружившись приведенными определениями и опираясь на работу, проделанную ранее @xcite, мы теперь в состоянии записать уравнение скорости, управляющее эволюцией распределения степеней. для сети из узлов @xmath0 в заданную единицу времени общее количество узлов со степенью @xmath7 равно @xmath16. через одну единицу времени мы добавляем одну вершину и убираем вершины @xmath2, таким образом, число равно @xmath17, где @xmath18 - это новое значение @xmath6. следовательно, мы имеем, @xmath19, где @xmath20 - условная вероятность следования по ребру от узла степени @xmath21 и достижения узла степени @xmath7. альтернативно, это распределение степеней узлов в конце ребра, исходящего из узла степени @xmath21. обратите внимание, что @xmath22 и @xmath23 всегда равны нулю, а для некоррелированной сети - @xmath24. термины, включающие @xmath11, описывают поток вершин со степенью @xmath25 в @xmath7 и @xmath7 в @xmath26 как следствие ребер, полученных в результате добавления новых вершин. первые два термина, включающие @xmath27, описывают поток вершин со степенью @xmath28 в @xmath7 и @xmath7 в @xmath25, поскольку вершины теряют ребра в результате потери соседей. термин @xmath29 представляет прямое удаление вершины степени @xmath7 со скоростью @xmath2. наконец, @xmath9 представляет добавление вершины со степенью @xmath7. процессы, в которых вершины получают или теряют два или более ребер, исчезают в пределе large @xmath0 и не включаются в уравнение. . уравнение скорости, описанное выше, представляет собой серьезную проблему из-за появления @xmath20 из терминов, представляющих удаленные ребра от потерянных соседей. с уравнениями скорости для схем восстановления, основанных на перемонтаже ребер, немного проще иметь дело. при сбое все ребра, подключенные к этому узлу, перемонтируются таким образом, что степени соседей удаленного узла не изменяются, и этот термин не появляется. конкретный случай преимущественного сбоя в сетях со степенным законом был рассмотрен ранее в этом контексте @xcite. однако этот протокол восстановления может использоваться только в сетях строго растущего размера, поскольку сеть постоянного размера стала бы плотной при его применении. более того, это зависит от степенной структуры сети. описанные здесь методы являются общими и применимы к распределениям произвольной степени. помимо перемонтажа ребер, частный случай случайного удаления также приводит к значительному упрощению. равномерное удаление равносильно установке @xmath30. выполнение этого затем приводит к следующему, @xmath31, который отображает уравнение. независимо от @xmath32 и, следовательно, независимо от любых корреляций между степенями. следовательно, случайное удаление закрывает уравнение для @xmath33, позволяя нам искать решение для распределения степеней для заданных @xmath34 и @xmath11. при неравномерном удалении распределение степеней зависит от двухточечного распределения вероятностей, и, как мы увидим в разделе [sec: корреляции ], двухточечное распределение вероятностей будет зависеть от трехточечного распределения вероятностей и так далее. эта иерархия распределений, где распределение @xmath0-точечное зависит от распределения @xmath35-точечное, не замыкается при неравномерном отказе, и, следовательно, трудно найти точное решение для распределения степеней. тем не менее, далее мы продемонстрируем метод, который позволяет нам обойти эту проблему.    как упоминалось ранее, для целей этой статьи нас будет интересовать сеть постоянного размера, где скорость атаки компенсируется скоростью восстановления. предполагая, что сеть достигает (или уже является) стационарного распределения и не обладает корреляциями между степенями, мы устанавливаем @xmath5 и можем еще больше упростить уравнение . . пусть @xmath36 - средняя степень удаления узлов из сети (т.е. @xmath37), а @xmath38 - средняя степень удаления узлов из сети. исходное распределение степеней @xmath33. тогда у нас есть, @xmath39 процесс эволюции, в частности неравномерное удаление узлов, может и во многих случаях будет вводить корреляции степени в наши сети. чтобы решить эту проблему, мы сначала найдем варианты для @xmath9 и @xmath40, которые удовлетворяют решениям уравнения скорости для данного @xmath6 в некоррелированной сети. затем мы продемонстрируем, что специальное подмножество этих решений для @xmath34 и @xmath11 является некоррелированной фиксированной точкой уравнения скорости для корреляций степень - степень. это открывает возможность того, что сеть, которая изначально не имеет корреляций между степенями, не будет развивать корреляции в процессе эволюции. хотя уравнение скорости, описанное в уравнении. довольно сложное, определить соотношение между добавленными ребрами и удаленными - относительно простое упражнение. умножение уравнения.   на @xmath7, суммирование по @xmath7 и перестановка дают результат @xmath41. это уравнение просто интерпретировать. поскольку сеть имеет постоянное распределение степеней с фиксированной точкой, средняя степень сети остается постоянной, и, следовательно, ребра удаляются и добавляются с одинаковой скоростью. в этом разделе мы описываем наш метод, с помощью которого сети могут восстанавливаться после различных форм атак. типы атак, которые мы рассматриваем, в целом изучаются большинством авторов (хотя и в статических сетях), а именно предпочтительные и целенаправленные атаки. случайные сбои являются наиболее широко изучаемыми схемами как в статических, так и в развивающихся сетях, ввиду того факта, что они поддаются относительно простому анализу. эти типы сбоев могут быть характерны, скажем, для перебоев в работе линий электропередачи или трансформаторов в энергосистеме из-за внешних факторов, таких как погода. однако функциональность большинства сетей часто зависит от производительности узлов более высокого уровня, следовательно, неоднородные схемы атак фокусируются на них. например, в одноранговой сети узел высокого уровня может быть центральным пользователем с большими объемами данных. высокий уровень также может указывать на величину нагрузки на узел во время его работы или на публичную видимость человека в социальной сети. разумно предположить, что вредоносная сущность, такая как компьютерный вирус, с большей вероятностью поразит эти важные узлы. и др. _ @xcite применили эту стратегию удаления (среди прочих) в различных моделируемых и реальных сетях и обнаружили, что она весьма эффективна для нарушения структуры атакуемой сети. узлы ) со средним значением @xmath42, при преференциальной атаке @xmath43 и равномерном подключении @xmath44 с использованием @xmath45.,ширина=302 ] мы моделируем эти виды атак, используя преференциальный сбой @xmath43, который отбирает узлы пропорционально их количеству подключений, и посредством прямой атаки на узлы наивысшей степени, представленные с помощью @xmath46, где @xmath47 - шаговая функция Хевисайда. наш метод компенсации будет включать в себя контроль над двумя процессами: первый, когда наша вновь поступающая / восстановленная вершина выбирает для себя степень, полученную из некоторого распределения @xmath9, и второй, процесс, посредством которого эта вершина решает подключиться к любой другой вершине в сети, управляемый ядром присоединения @xmath40. наша цель здесь - решить для ядра вложения @xmath11, которое сохранит исходное распределение вероятностей @xmath33, при условии удаления ядра @xmath13 для некоторого выбора @xmath34. мы будем предполагать, что конечная сеть некоррелирована, и работать с уравнением, имея в виду, что любой произвольный выбор @xmath34 и @xmath11, вероятно, не согласуется с этим предположением.    вводя кумулятивное распределение для атакованных и вновь добавленных вершин, @xmath48 и @xmath49 соответственно, @xmath50 мы суммируем уравнение.   из @xmath51 в @xmath52, отмечая, что @xmath41 для нашей стационарной сети. это приводит к следующему соотношению, @xmath53, разделяя обе стороны на @xmath33, дает нам выражение для вложения ядро, @xmath54. \\nonumber\\\\ \\label{eq : genattachment}\\end{выровнено}\\ ] ] узлы ) с помощью @xmath42, при атаке высокой степени @xmath55 и равномерном присоединении @xmath44 с использованием @xmath45.,ширина=302 ] уравнение представляет набор возможных решений для ядра присоединения, которые приведут к желаемое распределение степеней, учитывая, что конечная сеть некоррелирована. правильный выбор решения из приведенного выше набора должен соответствовать условию согласованности, заключающемуся в том, что при вставке в уравнение скорости для корреляций степень - степень корреляции исчезают. в разделе [sec : корреляции ] мы покажем, что следующий _ ansatz _, выбранный из приведенного выше набора, является таким выбором: уравнение @xmath56 было ранее выведено @xcite для случая случайного удаления. здесь мы утверждаем, что это работает в более общем плане для случая неоднородной атаки, когда наша исходная сеть некоррелирована (с некоторыми оговорками, которые будут объяснены вскоре). выбор @xmath11 имеет интуитивный смысл, потому что величина @xmath57 - это распределение вероятностей, определяющее количество ребер, принадлежащих узлу, достигаемое путем следования по случайно выбранному ребру к одному из его концов, _ не включая _ ребро, за которым следовал. это на единицу меньше, чем общая степень узла, и также называется распределением _ избыточной _ степени. обратите внимание, что в нашей модели мы указываем степень входящих узлов. следовательно, появление распределения избыточных степеней является признаком некоррелированной сети, подразумевая, что вновь поступающие ребра вводятся некоррелированным образом. в основном существуют два условия для существования решения, заданного уравнением.  ; @xmath58 должно быть допустимым распределением вероятностей, а @xmath38 должно быть конечным. это не очень строгие условия, и обычно им удовлетворяет большинство степенных распределений. другими словами, за исключением некоторых патологических случаев, всегда можно найти решение в виде уравнения. . существует дополнительное соображение, процесс удаления может привести к появлению узлов нулевой степени в сети, в которой изначально не было таких узлов. в то время как доля таких узлов исчезающе мала для сетей, скажем, с распределениями по степеням Пуассона, они могут быть нетривиальными для степенных сетей. таким образом, важно установить @xmath59 (вероятность подключения к узлу нулевой степени) на большое значение, чтобы повторно подключить эти узлы к сети. теперь мы в состоянии выполнить восстановление сети. учитывая исходное распределение степеней @xmath6 и форму атаки @xmath13, уравнение. дает нам точный рецепт восстановления распределения степеней. нам нужно произвести выборку степеней вновь введенных узлов пропорционально произведению ядра удаления _ и _ распределения степеней, а затем присоединить эти ребра пропорционально распределению избыточных степеней сети. чтобы протестировать наш метод восстановления, мы приводим четыре примера для изначально некоррелированных сетей с узлами @xmath60, сгенерированными с использованием _ configuration model _ @xcite. в модели конфигурации указаны только степени вершин, помимо этого единственного ограничения, соединения между вершинами устанавливаются случайным образом. узлы ) с помощью @xmath61 при целенаправленной атаке @xmath62 с использованием @xmath11 из eq.   после установки @xmath45.,width=302 ] результаты моделирования показывают начальное распределение степеней и компенсированное распределение, подверженное двум типам атак на пуассоновские сети с распределением степеней, заданным, @xmath63 на рис. [ рис. : poissonpref ] мы показываем результирующее распределение степеней, в которых узлы были атакованы преимущественно, т.е. @xmath43, в то время как на рис. [ рис. : poissontheta ] мы показываем случай целенаправленной атаки только на узлы высокой степени, представленные @xmath64, где @xmath65 - это _ минимальная _ степень атакованного узла. степени вновь добавленных узлов были выбраны из распределения @xmath58 с ядром вложения @xmath11, установленным равным единице, что соответствует решению уравнения после подстановки в соответствующий @xmath6. точки данных на всех рисунках усреднены по нескольким реализациям сети, каждая из которых подвергается @xmath66 итерациям добавления и удаления. точки вместе с соответствующими полосами ошибок представляют конечное распределение степеней, тогда как сплошная линия представляет исходную сеть. как видно из рисунков, конечные сети находятся в отличном согласии с исходным распределением степеней.     узлы ) с экспонентой @xmath67 и экспоненциальным отсечением @xmath68 при преимущественной атаке @xmath43 с использованием @xmath11 из eq.   после установки @xmath45.,width=302 ] мы используем те же ядра атаки, @xmath43 и целенаправленную атаку только на узлы высокой степени, представленные @xmath64 в двух других примерах. в нашем первом примере сети ссылки распределены в соответствии со степенным законом с экспоненциальным ограничением, @xmath69 @xmath70 - это константа нормализации, которая в данном случае равна @xmath71, где функция @xmath72 - это полилогарифмическая функция, определенная следующим образом : @xmath73 экспоненциальное ограничение было введено для трех причины. во-первых, многие сети реального мира, по-видимому, показывают это ограничение @xcite, а во-вторых, оно делает распределение нормализуемым для диапазонов показателя @xmath74. наконец, для чисто степенной сети в принципе возможно присвоить степень узлу, размер которого превышает размер системы. экспоненциальное ограничение гарантирует, что вероятность того, что это произойдет, исчезающе мала. в других примерах, которые мы рассматриваем, функциональная форма распределения уже обеспечивает это свойство. вторая сеть имеет экспоненциальное распределение, заданное, @xmath75 рис. [ рис. : exptheta ] показаны результаты для экспоненциально распределенной сети ( @xmath61 ), подвергшейся целенаправленной атаке. на рис. [ рис. : powerpref ] мы показываем результирующее распределение степеней для сети со степенным законом (@xmath67 и @xmath68), где узлы были атакованы преимущественно. оба рисунка показывают, что начальная и конечная сети находятся в отличном согласии.    на данном этапе, помимо технических деталей, стоит напомнить себе об общей картине. выше мы продемонстрировали, что если сеть с определенной степенью структуры подвергается атаке, направленной на дестабилизацию этой структуры, можно восстановить то же самое, манипулируя правилами, по которым вершины вводятся в сеть. правила, которые мы используем в нашем методе восстановления, зависят от типов атак, которым подвержены наши сети. в следующем разделе мы приводим подробное обоснование применения нашего метода.      для того чтобы наши результаты из предыдущих разделов были достоверными, мы должны продемонстрировать, что наши изначально некоррелированные сети остаются некоррелированными в соответствии с нашей схемой ремонта. чтобы достичь этого, мы определим уравнение скорости для корреляций степень - степень и продемонстрируем, что некоррелированная сеть является фиксированной точкой этого уравнения. наше уравнение скорости будет описывать эволюцию ожидаемого числа ребер в сети с концами степени @xmath7 и @xmath76. пусть ожидаемое число таких ребер в сети равно, @xmath77, где @xmath78, а @xmath79 - это вероятность того, что случайно выбранное ребро имеет степень @xmath7 на одном конце и степень @xmath76 на другом. ожидаемое количество ребер после одного временного шага, когда мы добавляем @xmath80 и убираем @xmath81 ребра, тогда, @xmath82 e'_{l, k } = m e_{l, k } + \\delta, \\label{eq : edgerate1}\\ ] ] где @xmath83 представляет все другие процессы добавления и удаления кромок. мы уже установили, что в случае стационарного состояния @xmath84 независимо от распределения степеней, поэтому наша цель эквивалентна показу, что @xmath83 равно нулю для некоррелированной сети, сгенерированной / восстановленной с помощью наших специальных вариантов @xmath11 и @xmath34. в результате @xmath85, подразумевая, что корреляции между степенями (если таковые имеются) остаются постоянными с течением времени. мы будем предполагать, что наша сеть локально древовидна, что справедливо для большинства случайных графов. кроме того, мы будем рассматривать только процессы, выходящие ко вторым ближайшим соседям узла. эти предположения позволяют нам избежать включения членов в уравнение скорости, представляющее удаление узлов с соседями, которые связаны друг с другом. тем не менее, есть большое количество оставшихся процессов, которые нам нужно будет рассмотреть. для начала обратите внимание, что уравнение скорости симметрично в индексах @xmath76 и @xmath7. любой процесс, который вносит вклад в изменение @xmath7 при сохранении константы @xmath76, также вносит вклад в изменение @xmath76 при сохранении константы @xmath7. поэтому мы можем рассмотреть вклады в @xmath83 от @xmath86, @xmath87 и @xmath88 и добавить соответствующие симметричные члены в конце. первый процесс, который нам нужно принять во внимание, - это прямое добавление узла степени @xmath76. это вносит два потока в уравнение скорости, @xmath89 и @xmath90. аналогично, прямое удаление узла степени @xmath76 вносит вклад в @xmath91 и @xmath92. далее нам нужно будет принять во внимание процессы второго ближайшего соседа. мы можем быть уверены, что эти члены имеют одинаковый порядок, просто подсчитав количество несуммированных распределений вероятностей, которые входят в каждый процесс. для процесса присоединения будет два термина, представляющих ситуацию, когда новый узел любой степени присоединяется к узлу степени @xmath7 или @xmath25, который ранее был присоединен к узлу степени @xmath76. этими терминами являются @xmath93 и @xmath94. аналогично, существуют два процесса удаления, в которых узел любой степени, удаляемый из сети, ранее был присоединен к узлу степени @xmath7 или @xmath28, у которого есть сосед(-ы) степени @xmath76. к сожалению, эти термины вводят трехточечные корреляции в уравнение скорости. аналогично методам, используемым в аналогичных задачах иерархии, мы используем приближение замыкания момента, чтобы представить эти процессы как произведение двух двухточечных корреляций следующим образом, @xmath95 adобъединяя все эти термины, наше окончательное уравнение для @xmath83 будет таким: @xmath96 в дополнение к терминам, где @xmath76 и @xmath7 взаимозаменяемы.    после вставки соответствующих @xmath11 и @xmath34 из eq. наряду с некоррелированным решением @xmath97, можно показать, что, @xmath98 согласно уравнению, существует набор решений, таких, что изначально некоррелированная сеть не будет развивать никаких корреляций степени в результате процесса эволюции. ядро подключения, которое использовалось в процессе эволюции сети, описанном в разделе [ sec : designattachment ], было подмножеством этих решений. это позволило использовать метод восстановления, поддерживая незначительные корреляции в сети. следует отметить, что мы явно не продемонстрировали устойчивость некоррелированного решения к возмущениям. например, колебания в @xmath87 или в количестве ребер могут вывести сеть из некоррелированного стационарного состояния. аналитический подход для определения этого, скажем, с использованием анализа линейной устойчивости, затруднен из-за многочисленных связанных распределений вероятностей. поэтому вместо этого мы прибегаем к численному подходу. мы измерили коэффициент корреляции Пирсона между степенями узлов на обоих концах ребра для всех наших модельных сетей. для пуассоновского и экспоненциального случаев корреляции оставались незначительными в процессе эволюции. с другой стороны, степенная сеть выявила нетривиальные корреляции. мы не смогли определить, было ли появление этих корреляций вызвано эффектами конечного размера, нестабильностью некоррелированного решения или какой-либо другой причиной. результаты показывают, что соответствие между начальным и конечным распределениями степеней очень хорошее, и кажется, что в данном конкретном случае корреляции не продемонстрировали существенного влияния на конечное состояние сети. в этой статье мы показали, как сохранить распределение уровней сети от различных форм атак или сбоев, позволяя ей адаптироваться с помощью простых манипуляций с правилами, которые управляют введением узлов и ребер. мы основывали наш анализ на уравнении скорости, описывающем эволюцию сети при произвольных схемах добавления и удаления. в дополнение к выбору степени входящих узлов, мы позволяем себе выбирать, как узлы присоединяются к существующей сети. чтобы разобраться с частным случаем неравномерного удаления, мы ввели уравнение скорости для эволюции корреляций между степенями и использовали его в сочетании с уравнением для распределения степеней, чтобы прийти к нашему решению. мы привели примеры применимости этого метода, используя комбинацию аналитических методов и численного моделирования для различных степенных распределений, что в каждом случае дает отличные результаты. структура многих сетей в реальном мире критически связана с их производительностью. многие авторы ухватились за тот факт, что технологические сети, такие как Интернет и одноранговые сети, по своей природе являются степенными, и использовали это, среди прочего, для разработки эффективных схем поиска. потеря структурных свойств этих сетей приводит к серьезным ограничениям на их производительность. недавние эмпирические исследования @xcite показали, что удаление узлов, например, во всемирной паутине, как правило, носит неоднородный характер. ввиду этого для исследователей крайне важно найти эффективные решения, чтобы попытаться справиться с такими типами сбоев. насколько нам известно, существует значительный пробел в понимании процесса неравномерного удаления узлов и ребер и соответствующих методов для их устранения. эта статья начинает устранять этот пробел. следует отметить, что описанные нами методы в решающей степени зависят от предположения о незначительных корреляциях по мере развития сети. любопытно, что в нашем примере степенной сети нам удалось получить очень хорошее соответствие между начальным и конечным распределениями степеней, несмотря на появление нетривиальных корреляций. безусловно, будет интересно посмотреть, можно ли распространить наши методы на случай сетей с сильными корреляциями и другими показателями, описывающими структуру сети. возможно, можно напрямую сопоставить уравнение скорости для корреляций степень - степень, хотя на данный момент это кажется сложной перспективой. идея защитить структуру сетей от атак, позволив ей реагировать в режиме реального времени, является относительно зарождающейся, и авторы с нетерпением ожидают дальнейших разработок в этой области.

в последние годы наблюдается значительный интерес к устойчивости сетей к сбоям. многие предыдущие исследования были сосредоточены на влиянии удаления узлов и ребер на структуру подключения в статической сети; сети считаются статичными в том смысле, что для восстановления исходной структуры не допускаются компенсационные меры. однако сети реального мира, такие как всемирная паутина, не являются статичными и испытывают значительную текучесть кадров, когда узлы и ребра как добавляются, так и удаляются. рассматривая удаление узлов на основе степени, мы исследуем возможность защиты сетей от подобных сбоев. мы восстанавливаем исходное распределение степеней, позволяя сети реагировать на атаку путем введения новых узлов и присоединения их ребер с помощью специально разработанных схем. мы уделяем особое внимание случаям неравномерных сбоев, теме, которой уделялось мало внимания в контексте развивающихся сетей. используя комбинацию аналитических методов и численного моделирования, мы демонстрируем, как сохранить точное распределение степеней защиты изучаемых сетей от различных форм атак. в последние годы в физическом сообществе наблюдается значительный интерес к свойствам сетей @xcite. методы статистической физики в сочетании с широкой доступностью вычислительных ресурсов облегчили проведение исследований, начиная от крупномасштабного эмпирического анализа всемирной паутины, социальных сетей, биологических систем и заканчивая разработкой теоретических моделей и инструментов для изучения различных свойств этих систем. относительно большой объем работ был посвящен изучению степенных распределений сетей, сосредоточив внимание как на их измерении, так и на формулировании теорий, объясняющих их возникновение и их влияние на различные свойства, такие как устойчивость и просачивание. эти исследования в основном направлены на сети в реальном мире, которые развиваются естественным образом, в том смысле, что они управляются динамическими процессами, не находящимися под нашим контролем. показательными примерами являются социальные, биологические сети и информационные сети, такие как всемирная паутина, которая, хотя и создана человеком, растет распределенным образом. однако существуют различные классы сетей, связанных с инфраструктурой, таких как транспортные и электрические сети, сети связи, такие как телефон и Интернет, которые развиваются под руководством централизованно контролируемого органа власти. в дополнение к ним существует относительно новый класс сетей, которые находятся между этими двумя типами, классическим примером которых являются одноранговые сети обмена файлами. эти сети развиваются совместным, распределенным образом, так что мы не имеем прямого влияния на их структуру. однако мы можем манипулировать некоторыми правилами, по которым они формируются, что дает нам ограниченное, но потенциально полезное влияние на их свойства. хорошо установленный факт, что структура таких сетей напрямую связана с их производительностью. ввиду этого были предприняты определенные усилия, чтобы адаптировать эти сети _ designer _ к структурам, которые оптимизируют определенные свойства, такие как устойчивость к удалению узлов и эффективная передача информации, среди прочего @xcite. в таких сетях обычно наблюдается значительная текучесть кадров, когда пользователи добровольно присоединяются к сети и покидают ее, возможны сбои в работе ключевых компонентов и ресурсов или преднамеренные атаки, такие как отказ в обслуживании. эти факторы могут привести к серьезному нарушению структуры сети и, как следствие, потере ее ключевых свойств. перед лицом этого естественно распространить наш анализ на последствия этих сбоев/ атак и использовать наш ограниченный контроль, чтобы попытаться адаптивно восстановить первоначальную структуру этих сетей. предыдущая работа была сосредоточена на последствиях сбоев в работе статических сетей, где авторы изучали структуру подключения при случайном /целенаправленном удалении узлов и ребер @xcite. сеть считается статической в том смысле, что никакие компенсационные меры, такие как введение новых ребер или узлов, не допускаются. эффект от этих удалений был измерен с учетом существования _ гигантского компонента _: наибольшего набора вершин в сети o(@xmath0 ), где @xmath0 - количество узлов, которые соединены друг с другом по крайней мере одним путем. репрезентативный пример можно найти в статье Альберта _ и др._ @xcite, где они изучали размер гигантского компонента сетей без масштабирования, таких как Интернет, при моделировании случайных сбоев и целенаправленных атак на узлы высокой степени защиты. одна из интересных вещей, которую они обнаружили, заключалась в том, что, хотя эти сети были удивительно устойчивы к случайным сбоям, они были чрезвычайно уязвимы для целенаправленных атак. это подчеркивает важность неоднородных стратегий удаления. в отличие от статического случая, сети, рассматриваемые в этой статье, эволюционируют во времени с постоянным удалением узлов и ребер. сети разрешается реагировать на эти сбои путем введения новых узлов и ребер, выбранных для присоединения таким образом, чтобы сеть сохраняла свою первоначальную форму, по крайней мере, с точки зрения распределения степеней. такие модели, обычно называемые в литературе \"реактивными сетями\", обсуждались ранее, см., например, @xcite. здесь мы предполагаем, что разработчики сети осведомлены только о статистических свойствах удаленных узлов и не имеют возможности влиять на существующую сеть, за исключением введения новых узлов или повторного подключения удаленных. следовательно, под их контролем находятся два процесса для компенсации атаки. первый - это степень введенных вершин, а второй - процесс, посредством которого вновь введенная вершина выбирает присоединение к ранее существовавшей вершине в сети. таким образом, сбой компенсируется добавлением узлов и ребер, выбранных из соответствующего распределения степеней, и присоединением их к сети с помощью специально разработанных схем. обратите внимание, что в нашей модели можно повторно ввести узлы, которые были удалены, или ввести совершенно новые наборы узлов. первый случай может указывать, скажем, на компьютер в одноранговой сети, который теряет соединение и хотел бы восстановить его. последнее может представлять собой постоянную потерю веб -страниц из всемирной паутины и введение новой веб - страницы. мы используем ядро вложения Крапивского и Реднера @xcite для моделирования введения узлов и ребер, и с помощью введения ядра удаления мы анализируем интересный и забытый случай неравномерного удаления.    было предложено множество моделей для моделирования эволюции и роста сети, в которых вершины как добавляются, так и удаляются @xcite, но они были сосредоточены на относительно простом случае равномерного удаления. мы покажем, что при равномерных отказах появлением корреляций между степенями, которые обычно возникают в результате процессов роста, как обсуждалось в @xcite, можно пренебречь. предыдущие модели использовали в своих интересах именно этот факт, чтобы обойти трудности, связанные с корреляциями между степенями. в случае неравномерного удаления корреляции нельзя игнорировать. в этой статье мы решаем эту проблему, демонстрируя, как сохранить изначально некоррелированную сеть на протяжении всего процесса эволюции с введением дополнительного уравнения скорости для корреляций между степенями. мы приводим аналитические результаты и численное моделирование для различных распределений степеней при различных формах атак. во всех случаях, которые мы изучаем, мы восстанавливаем _ точные _ распределения степеней.