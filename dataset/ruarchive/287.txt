системы биометрической аутентификации становятся все более распространенными в системах контроля доступа и в потребительских технологиях. в таких системах пользователь отправляет свое имя пользователя и свой биометрический образец, который сравнивается с сохраненным биометрическим шаблоном, связанным с этим именем пользователя (соответствие \"один к одному\"). популярность систем, основанных на биометрических данных, проистекает из распространенного мнения, что такие системы аутентификации более безопасны и удобны для пользователя, чем системы, основанные на паролях. в то же время использование таких систем вызывает опасения по поводу безопасности и конфиденциальности хранимых биометрических данных. в отличие от паролей, замена скомпрометированного биометрического признака невозможна, поскольку биометрические признаки (например, лицо, отпечаток пальца и радужная оболочка глаза) считаются уникальными. таким образом, безопасность биометрических шаблонов является важным вопросом при рассмотрении систем, основанных на биометрии. более того, слабая защита биометрических шаблонов может иметь серьезные последствия для конфиденциальности пользователя, как обсуждалось в предыдущей работе @xcite. были предложены различные решения для защиты биометрических шаблонов (например, @xcite). наиболее известными из них являются secure sketch @xcite и fuzzy extractors @xcite. к сожалению, эти решения не очень хорошо применяются на практике. первая причина этого - компромисс между безопасностью и удобством использования из-за снижения скорости распознавания @xcite. вторая причина связана с использованием токенов, которые необходимы для хранения вспомогательных данных, что влияет на удобство использования. наконец, эти механизмы основаны на предположениях, которые трудно проверить (например, гарантии конфиденциальности secure sketch предполагают, что биометрический признак обрабатывается в почти полную энтропийную строку).    в этой работе мы предлагаем другой подход для защиты биометрических шаблонов, называемый honeyfaces. при таком подходе мы прячем реальные биометрические шаблоны среди очень большого количества синтетических шаблонов, которые неотличимы от реальных. таким образом, идентификация реальных пользователей в системе становится очень сложной проблемой `поиска иголки в стоге сена\". в то же время honeyfaces не требует использования токенов и не влияет на скорость распознавания (по сравнению с системой, которая не предоставляет никакого механизма защиты). кроме того, он может быть интегрирован с другими решениями для обеспечения конфиденциальности (например, secure sketch), предлагая дополнительные уровни безопасности и приватности.    для простоты обсуждения давайте предположим, что все биометрические шаблоны (реальные и синтетические) хранятся в биометрическом `файле паролей\". наш новый подход позволяет увеличить размер этого файла на несколько порядков. такое увеличение обеспечивает 4-уровневый защитный механизм для защиты безопасности и конфиденциальности биометрических шаблонов без дополнительных затрат на удобство использования. а именно, honeyfaces: * снижает риск утечки файла биометрических паролей; * увеличивает вероятность обнаружения такой утечки онлайн; * позволяет постприори обнаружить утечку файла (биометрических) паролей; * защищает конфиденциальность биометрических данных в случае утечки; в дальнейшем мы укажите, как работает этот механизм и его приложения в различных настройках.    очень большой размер `файла паролей\" повышает * устойчивость системы к его утечке*. мы показываем, что можно увеличить систему с 270 пользователями (180 кб `файл паролей\") до системы с числом пользователей до @xmath0 (56,6 тб ` файл паролей\"). очевидно, что отфильтровать такой огромный объем информации сложно. более того, вынуждая злоумышленника к утечке значительно большего объема данных (из-за раздутого файла), ему либо требуется значительно больше времени, либо у него гораздо больше шансов быть пойманным системами обнаружения вторжений. таким образом, расширение файла облегчает * обнаружение утечки*, пока она происходит. преимущества увеличения биометрического `файла паролей\" могут быть продемонстрированы в сетях, исходящая пропускная способность которых очень ограничена, таких как сети с воздушным зазором (например, те, которые рассматриваются в @xcite). такие сети обычно развертываются в зонах ограниченного доступа с высоким уровнем безопасности и, таким образом, ожидается, что они будут использовать биометрическую аутентификацию, возможно, в сочетании с другими механизмами аутентификации. как только злоумышленнику удается проникнуть в сеть, он обычно имеет очень ограниченную полосу пропускания для эксфильтрации, обычно используя физический канал связи ограниченной пропускной способности (с типичной пропускной способностью менее 1 Кбит/сек). в таких сетях увеличение размера базы данных повышает устойчивость к эксфильтрации базы данных. а именно, эксфильтрация 180 Кб информации (размер биометрического `файла паролей\" в системе с 270 пользователями) занимает разумное время даже в каналах с низкой пропускной способностью по сравнению с 56,6 тб (размер раздутого биометрического `файла паролей\"), что занимает более 5,2 дней для эксфильтрации за 1 гбит/сек, 14,4 года при скорости 1 мбит/сек, или около 14 350 лет в сети с воздушным зазором при скорости 1 Кбит/сек.    аналогично honeywords @xcite, поддельные аккаунты позволяют * обнаруживать просочившиеся файлы*. а именно, при использовании настроек аутентификации на двух серверах каждый запрос аутентификации сначала отправляется на сервер, содержащий файл с завышенным паролем. как только первый сервер аутентифицирует пользователя, он отправляет запрос на второй сервер, содержащий только законные учетные записи, таким образом определяя, была ли вызвана поддельная учетная запись с `правильными\" учетными данными. это явное свидетельство того, что, несмотря на сложность эксфильтрации, файл паролей (или его часть) был утечен. все вышеперечисленные гарантии в значительной степени зависят от неспособности злоумышленника изолировать реальных пользователей от поддельных. мы показываем, что эта задача практически невыполнима в различных условиях состязательности (когда злоумышленник получил доступ к файлу паролей). мы также показываем, что выполнение запросов на членство для идентификации реального пользователя путем сопоставления изображения лица из внешнего источника с биометрическим `файлом паролей\" является вычислительно неосуществимым. мы анализируем надежность системы в наихудшем сценарии, при котором у злоумышленника есть изображения лиц всех пользователей, кроме одного, и он пытается найти неизвестного пользователя среди искусственных лиц. мы показываем, что система защищает конфиденциальность пользователей и в этом случае. в заключение, honeyfaces * защищает биометрические шаблоны реальных пользователей * во всех настройках, которые могут быть защищены. добавление большого количества искусственных лиц может вызвать опасения по поводу снижения точности аутентификации. однако мы показываем, что это не так. внешний вид лиц соответствует многомерному гауссову распределению, которое мы называем в этой статье _ face - space_, параметры которого извлекаются из набора реальных лиц, включая лица пользователей системы. мы отбираем синтетические лица из той же генеративной модели, ограничивая их на определенном расстоянии от реальных и других синтетических лиц. мы выбрали это расстояние достаточно большим, чтобы новые выборки реальных пользователей не сталкивались с синтетическими. несмотря на то, что такое ограничение ограничивает количество лиц, которые может создать система, это число остается очень большим. используя обучающий набор из 500 реальных лиц для построения генерирующей модели лица, мы успешно создали синтетические лица @xmath0. нашей системе honeyfaces требуется метод генерации синтетических лиц, который удовлетворяет трем требованиям: * система должна быть способна генерировать (очень) большое количество уникальных синтетических лиц. * эти синтетические лица должны быть неотличимы от реальных лиц. * искусственные лица не должны влиять на точность аутентификации реальных пользователей.    эти требования гарантируют, что лица реальных пользователей могут скрываться среди искусственных, не влияя на точность распознавания. есть два направления исследований, связанных с идеями, представленными в этой статье. один из них - honeyobjects, обсуждаемый в разделе [ sec : sub : sub : honeyobjects ]. второй, обсуждаемый в разделе [ sec : sub : sub : biometric_synthesis ], - это синтез биометрических признаков. объекты honeyobjects широко используются в компьютерной безопасности. использование пользователей honeypot (поддельных учетных записей) - старый трюк, используемый системными администраторами. попытки входа в такие учетные записи являются явным признаком утечки файла паролей. позже была разработана концепция honeypots и honeynets @xcite. эти инструменты используются для заманивания противников в атакующие системы-приманки, тем самым раскрывая их инструменты и стратегии. honeypots и honeynets стали широко использоваться в мире компьютерной безопасности и играют важную роль в снижении киберрисков. недавно Джуэлс и Ривест представили honeywords @xcite, систему, предлагающую ложные пароли в дополнение к правильному. пользователь сначала аутентифицируется на главном сервере, используя стандартную аутентификацию на основе пароля, при которой сервер может отслеживать количество неудачных попыток. как только используется один из сохраненных паролей, сервер передает запрос второму серверу, который хранит только правильный пароль. идентификация использования ложного пароля вторым сервером предполагает утечку файла паролей. очевидно, что, как и в honeypots и honeynets, нужно убедиться, что пароли-приманки выбираются из того же пространства, что и реальные пароли (или из пространства, максимально близкого к этому). с этой целью необходимо правильно моделировать пароли, что является нетривиальной задачей, к которой подходили в нескольких работах @xcite. интересно отметить, что моделирование человеческих лиц было широко изучено и существуют очень хорошие модели (см. обсуждение в разделе [ sec : sub : generating ] ).    в honeywords достаточно просто изменить пароль пользователя один раз, если он был скомпрометирован. очевидно, что изменить внешность человека практически невозможно. таким образом, при использовании биометрических данных сам биометрический `файл паролей\" должен быть защищен. honeyfaces защищает биометрические данные, расширяя `файл паролей\" таким образом что это предотвращает утечки, что является существенной разницей между honeywords и honeyfaces. другой механизм маскировки, предложенный недавно, хотя и не имеющий прямого отношения к нашей работе, - это honey encryption @xcite. это процедура шифрования, которая генерирует зашифрованные тексты, которые расшифровываются в разные (но правдоподобные) открытые тексты при расшифровке одним из нескольких неправильных ключей, что затрудняет исчерпывающий поиск только по зашифрованному тексту. искусственные биометрические данные понимаются как биологически значимые данные для существующих биометрических систем @xcite. был предложен синтез биометрических данных для различных биометрических признаков, таких как лица (например, @xcite ), отпечатки пальцев (например, @xcite ) и радужная оболочка (например, @xcite ). основным применением синтеза биометрии было расширение обучающих наборов и валидация систем биометрической идентификации и аутентификации (смотрите @xcite для получения дополнительной информации о синтезе биометрии). Синтетические лица также используются в анимации, составлении лицевых композиций и экспериментах в когнитивной психологии. создание реалистичных синтетических биометрических признаков было главной целью всех этих методов. однако в большинстве предыдущих работ не рассматривался вопрос о том, как отличить синтетические образцы от реальных. работа в iris synthesis @xcite анализирует качество искусственных образцов путем объединения синтетических, реальных изображений и изображений без радужной оболочки в два кластера радужная оболочка / не- радужная оболочка. такое определение проблемы, очевидно, неоптимально для измерения неразличимости. контролируемое обучение с использованием меток реальных и синтетических данных имеет гораздо больше шансов на успех в разделении реальных и синтетических выборок, чем неконтролируемая кластеризация (более слабый алгоритм обучения) на группы iris / non- iris. в этих методах также использовались эксперименты по распознаванию, в которых сравнивалось сходство соответствующих параметров, полученных из реальных и синтетических входных данных. опять же, это косвенное сравнение, которое показывает пригодность метода генерации для оценки качества алгоритма распознавания, но его недостаточно для проверки неразличимости между реальными и синтетическими образцами.    в fingerprints было показано, что синтетические образцы, сгенерированные различными методами, можно отличить от реальных с высокой точностью @xcite. последующие методы синтеза @xcite показали лучшую устойчивость к атакам распознавания, использующим статистические тесты на основе @xcite. несколько методов создания синтетических изображений лиц @xcite обеспечивают почти фотореалистичные изображения, но, насколько нам известно, вопрос о неразличимости между реальными и синтетическими лицами ранее не рассматривался. раздел [ sec : sub : generating ] описывает, с обоснованием, метод, который мы используем для создания honeyfaces. в разделе [ sec : system ] мы представляем нашу настройку для использования honeyfaces в системе безопасной аутентификации. анализ конфиденциальности honeyfaces, обсуждаемый в разделе [ sec : privacyanalysis ], показывает, что злоумышленник не может получить личную биометрическую информацию из биометрического `файла паролей\". раздел [ sec : securityanalysis ] анализирует дополнительную безопасность, обеспечиваемую расширением `файла паролей\". мы завершаем статью в разделе [sec: резюме]. биометрические системы берут необработанный образец (обычно изображение) и обрабатывают его для извлечения признаков или вектора представления, устойчивого (насколько это возможно) к изменениям условий выборки. в системе honeyfaces у нас есть дополнительное требование: пространство объектов должно позволять выборку искусственных `результатов\" (лиц) в _больших числах_. эти искусственные лица будут использоваться в качестве паролей поддельных пользователей. были предложены различные модели для генерации и представления лиц, включая активные модели внешнего вида @xcite, трехмерные деформируемые модели @xcite и сверточные нейронные сети @xcite. такие модели использовались в распознавании лиц, компьютерной анимации, составлении лицевых композиций (применение в правоохранительных органах) и экспериментах в когнитивной психологии.    среди этих моделей мы выбрали active appearance model @xcite для реализации концепции honeyfaces. активная модель внешнего вида - это параметрическая статистическая модель, которая кодирует изменения лица, извлеченные из изображений, относительно среднего лица. эта работа была расширена и улучшена во многих последующих статьях (например, @xcite). в данном контексте слово \"активный\" относится к подгонке модели внешнего вида (am) к неизвестному лицу для последующего автоматического распознавания лиц @xcite. am также может использоваться с генерацией случайных чисел для создания правдоподобных, но полностью синтетических лиц. эти модели позволяют получить почти фотореалистичные изображения, сохраняющие индивидуальность, хотя и менее эффективны при моделировании волос и более мелких деталей, таких как родимые пятна, шрамы или морщины, которые демонстрируют незначительное пространственное соответствие между индивидуумами или вообще не демонстрируют его. наш выбор в пользу использования am для honeyfaces продиктован двумя причинами: 1) представление лиц в am согласуется с визуальным восприятием человека и, следовательно, также согласуется с понятием face - space @xcite. в частности, перцептивное сходство лиц коррелирует с расстоянием в пространстве am @xcite. 2 ) am - это хорошо понятная модель, ранее использовавшаяся при синтезе лиц (например, @xcite). также могут быть рассмотрены альтернативные модели лиц при условии наличия достаточного количества обучающих изображений (в зависимости от длины представления) для адекватного моделирования вариаций лица в популяции реальных лиц. новейшая технология распознавания лиц использует методы глубокого обучения (dl), поскольку они обеспечивают очень хорошие представления для проверки. однако качество реконструкции изображения из представления dl все еще далеко от удовлетворительного для нашего приложения. ams описывает вариацию, содержащуюся в обучающем наборе лиц, используемом для его построения. учитывая, что этот набор охватывает все вариации, связанные с изменением идентичности, am обеспечивает хорошее приближение к любому желаемому лицу. это приближение представлено точкой (или, точнее, локализованной непрерывной областью) в пространстве лица, определяемом коэффициентами am. распределение коэффициентов am лиц, принадлежащих к одной и той же этнической принадлежности, хорошо аппроксимируется независимой многомерной гауссовой функцией плотности вероятности @xcite (например, смотрите рисунок [ fig : distr_ex ], на котором представлено распределение первых 21 коэффициента am для пространства лиц, построенного из 500 лиц. ) новые экземпляры внешнего вида лица, синтетические лица, могут быть получены путем случайной выборки из такого распределения. для простоты далее мы предполагаем, что лица принадлежат к одной этнической группе. чтобы учесть лица из разных этнических групп, та же концепция может быть использована для смешанного распределения по Гауссу. мы следуем процедуре построения am, предложенной в @xcite. обучающий набор изображений лица, снятых при одинаковых условиях просмотра, аннотируется с использованием точечной модели, которая очерчивает форму лица и внутренние черты лица. в ходе этого процесса на каждое изображение лица вручную наносятся 22 ориентира. на основе этих точек определяется 190 точек полной модели (подробности смотрите на @xcite). для каждого лица координаты ориентира объединяются, образуя вектор формы, @xmath1. затем данные центрируются путем вычитания средней формы лица, @xmath2, из каждого наблюдения. компоненты принципа формы @xmath3 получены из набора вычитаемых средних наблюдений (расположенных в виде столбцов) с использованием pca. синтез формы лица (обозначаемой @xmath4) из _ shape model _ выполняется следующим образом, @xmath5, где @xmath6 - вектор, в котором первые элементы @xmath7 являются нормально распределенными параметрами, определяющими линейную комбинацию основных компонентов формы, а остальные элементы равны нулю. мы ссылаемся на @xmath6 как на _ коэффициенты формы.    перед получением текстурного компонента am обучающие изображения должны быть приведены в соответствие с использованием процедуры нежесткого выравнивания формы. каждое нормализованное по форме и центрированное rgb-изображение обучающего лица затем преобразуется в вектор @xmath8. такие векторы для всех обучающих граней образуют матрицу, которая используется для вычисления компонентов принципа текстуры @xmath9 путем применения pca. текстура лица (обозначаемая @xmath10 ) восстанавливается из _ texture model _ следующим образом, @xmath11, где @xmath12 - это _ texture coefficients _, которые также нормально распределены а @xmath13 - это средняя текстура.    окончательная модель получается с помощью pca на основе объединенных векторов параметров формы и текстуры. пусть @xmath14 обозначает основные компоненты объединенного пространства. коэффициенты am ( @xmath15 ) получены из соответствующей формы (@xmath1 ) и текстуры (@xmath8) следующим образом, @xmath16\\equiv q^t\\left [ \\begin{array}{c } w p_s^t(x-\\bar{x})\\\\ p_g^t(g-\\bar{g})\\\\ \\end{array } \\right]\\ ] ] где @xmath17 - это скаляр, который определяет вес формы относительно текстуры. рисунок [ fig_amm_example ] иллюстрирует вектор формы @xmath1 (изображение в центре) и вектор текстуры без формы @xmath8 (справа), используемые для получения коэффициентов am. коэффициенты am для * реального лица * получаются путем проецирования его формы @xmath1 и текстуры @xmath8 на основные компоненты формы и текстуры соответственно, а затем объединения параметров формы и текстуры в единый вектор и проецирования его на основные компоненты am. чтобы создать * синтетические грани *, мы сначала оцениваем @xmath18-мерное гауссово распределение @xmath19 коэффициентов am, используя обучающий набор реальных граней. затем коэффициенты am синтетических граней получают путем прямой выборки из этого распределения, отбрасывая выборки за пределы стандартных отклонений @xmath20. таким образом, чтобы все обучающие выборки находились в пределах стандартных отклонений @xmath20 от среднего значения. ]теоретически ожидаемое расстояние между выборками из распределения am до его центра составляет около @xmath21 единицы стандартного отклонения. мы заметили, что расстояние реальных лиц от центра действительно близко к @xmath21 единице стандартного отклонения. другими словами, коэффициенты am, скорее всего, будут лежать на поверхности @xmath18-мерного эллипсоида с радиусами @xmath22, где @xmath23. следовательно, для выборки синтетических граней мы используем следующий процесс: выборка @xmath24 из @ xmath18-мерного гауссовского @ xmath25, нормализация @xmath24 до единичной длины и умножение по координатам на @xmath26. чтобы свести к минимуму различия между am-представлениями реальных и синтетических лиц, мы применяем тот же процесс нормализации и к am-коэффициентам реальных лиц. биометрический `файл паролей\" системы honeyfaces состоит из записей, содержащих am-коэффициенты как реальных, так и синтетических лиц. коэффициенты достаточны для процесса аутентификации без восстановления лица. однако мы используем восстановленные лица в нашем анализе конфиденциальности и безопасности, поэтому ниже мы покажем, как восстановить лица по соответствующим им коэффициентам am.    сначала коэффициенты формы и текстуры получаются из коэффициентов am следующим образом, @xmath27 и @xmath28, где @xmath29^t$ ] является основой am. затем текстура и форма лица получаются с помощью уравнения. ( [ eq : shape_bit ] ) и ( [ eq : texture_bit ] ). наконец, текстура @xmath10 накладывается на форму @xmath4, в результате чего получается изображение лица. на рисунке [ fig : face_samples ] показано несколько примеров реконструированных реальных лиц и синтетических лиц, отобранных из расчетного распределения коэффициентов am. чтобы предотвратить эксфильтрацию и защитить конфиденциальность пользователей, мы создаем очень большое количество синтетических лиц. эти лица могут быть включены в систему аутентификации различными способами. например, метод honeywords @xcite хранит список паролей (один из которых правильный, а остальные поддельные) для каждой учетной записи. в наших настройках как количество синтетических лиц, так и соотношение синтетических и реальных лиц должно быть большим. таким образом, конфигурация, в которой учетные записи создаются исключительно для реальных пользователей, требует, чтобы к каждой учетной записи было прикреплено очень большое количество синтетических лиц. следовательно, в такой реализации во время процесса аутентификации лицо пользователя необходимо сравнить с длинным списком кандидатов (все поддельные лица хранятся вместе с именем пользователя). это увеличило бы время аутентификации в разы, равное соотношению искусственного к реальному, что негативно сказалось бы на удобстве использования системы и привело бы к нежелательному компромиссу между конфиденциальностью и удобством использования. другой альтернативой является создание множества поддельных учетных записей с одним лицом в качестве пароля. это не изменяет время аутентификации системы (по сравнению с системой без поддельных учетных записей). поскольку большинство реальных систем имеют очень обычные имена пользователей (например, первая буква данного имени, за которой следует фамилия), довольно легко создать поддельные учетные записи, следуя такому соглашению. как мы показываем в разделе [ sec : sub : blowup ], это позволяет увеличить размер файла паролей более чем до 56,6 тб (без учета хранения имен пользователей). можно также рассмотреть другую конфигурацию, направленную на то, чтобы обмануть противника, который знает правильные имена пользователей, но не реальные биометрические данные. в частности, мы можем хранить несколько лиц в каждой учетной записи (вместо только одного) в дополнение к поддельным учетным записям (предназначенным для злоумышленников, не знающих имен пользователей). все лица, связанные с поддельной учетной записью, являются синтетическими. лица, связанные с реальной учетной записью, включают одно реальное лицо этого пользователя, а остальные являются синтетическими. при такой конфигурации время аутентификации существенно не увеличивается, но общий размер `биометрических данных\" и соотношение реальных и синтетических лиц остается большим. более того, злоумышленнику, который знает имя пользователя, все равно необходимо идентифицировать реальное лицо среди нескольких искусственных лиц.    в этой работе мы реализовали и проанализировали конфигурацию, в которой у реальных и подставных пользователей есть учетная запись с одним паролем. Большинство пользователей являются поддельными, чтобы скрыть настоящих. у каждого пользователя (как реального, так и поддельного) есть имя учетной записи и пароль, составленные из 80 коэффициентов am. эти коэффициенты получены из предоставленного изображения лица для реальных пользователей или искусственно сгенерированы для ложных. количество обучаемых для построения лицевого пространства должно быть больше, чем количество пользователей системы. это обеспечивает лучшее моделирование внешнего вида лица, позволяя создавать большое количество синтетических лиц и защищая конфиденциальность пользователей системы, как описано в разделе [ sec : privacyanalysis ]. для обучения am мы использовали набор из 500 испытуемых. 270 из них были пользователями системы honeyfaces. все изображения в обучающем наборе были помечены ориентирами вручную с помощью инструмента, аналогичного тому, который используется в @xcite. мы вычислили 50-мерную модель формы и 350-мерную модель текстуры, как описано в разделе [ sec : sub : generating ], и мы уменьшили размерность параметров am до 80. мы отмечаем, что этот этап обучения выполняется один раз и должен охватывать пользователей системы в основном для оптимальной скорости аутентификации. однако, как мы позже обсудим в разделе [ sec : sub : facespace ], извлечение биометрической информации реальных пользователей из facespace неосуществимо. все представления, используемые в системе, были нормализованы до единичной нормы, а затем умножены на 7 стандартных отклонений. таким образом, мы принудили все выборки (реальные и синтетические) иметь одинаковую норму, сделав распределение расстояний между реальными и синтетическими гранями очень похожим друг на друга (см. рисунок [ fig : distr_ex ] ). мы использовали полученное пространство граней для генерации синтетических граней. мы отбрасывали синтетические лица, которые находятся ближе определенного расстояния от реальных или ранее созданных синтетических лиц. пороговое значение расстояния между лицами с разными идентификаторами было установлено равным 4800, что сводило к минимуму расхождение между распределениями расстояний между реальными и синтетическими лицами. это минимальное расстояние разделения предотвращает коллизии между гранями, и, таким образом, добавление синтетических граней не влияет на точность аутентификации исходной системы (до ввода в эксплуатацию). процесс генерации синтетических граней очень эффективен и занимает в среднем всего около 30 секунд с использованием matlab. используя 500 обучающих лиц, мы смогли создать около 100 синтетических лиц на достаточном расстоянии друг от друга. мы твердо верим, что можно сгенерировать больше граней (особенно если увеличить размер обучающего набора), но граней @xmath0, которые занимают 56,6 тбайт, кажется достаточным для доказательства концепции. процесс аутентификации в большинстве биометрических систем состоит из того, что пользователь вводит имя пользователя и изображение своего лица. это изображение (далее - тестовое изображение) выравнивается в соответствии с эталонным изображением, сохраненным для этого пользователя. после регистрации вычисляется расстояние между тестовым и эталонным шаблонами и сравнивается с некоторым предопределенным пороговым значением.    чтобы найти соответствие между тестом и эталонными шаблонами лиц в нашей системе, мы сначала реконструируем форму лица соответствующего субъекта в базе данных по коэффициентам am (как показано в разделе [ sec : sub : recon ] ). затем мы запускаем автоматический детектор ориентиров на тестовом изображении (используя face++ landmark detector @xcite ) и используем эти ориентиры и соответствующие местоположения в эталонной фигуре, чтобы найти преобразования масштабирования, поворота и трансляции между ними. затем мы применяем это преобразование к эталонной фигуре, чтобы привести ее в соответствие с координатной рамкой тестового изображения.    коэффициенты am тестового изображения вычисляются с использованием преобразованной эталонной формы и самого тестового изображения (как показано в разделе [ sec : sub : коэффициенты ] ), а затем сравниваются с сохраненными коэффициентами am пароля, используя норму l2. пороговое значение для расстояния l2 было установлено равным 3578, что соответствует 0,01% от far. Обратите внимание, что пороговое значение меньше расстояния между гранями (4800), используемого для создания синтетических граней. рисунок [ fig : lmk_samples ] иллюстрирует процесс аутентификации для подлинных попыток и попыток самозванца. мы выполнили 270 подлинных попыток, сравнив тестовое изображение с соответствующим эталонным изображением, и около 4 200 000 попыток самозванца (благодаря доступу к face++). при пороговом значении far, равном 0,01%, наша система показала истинный коэффициент приемлемости (100-frr), равный 93,33%. на рисунке [ рис. : roc ] показана соответствующая кривая roc. наши тесты не показали ухудшения frr / far после включения синтетических лиц. поиск ориентиров на тестовом изображении с помощью face++ landmark detector @xcite занимает в среднем 1,42 секунды для каждого объекта. мы отмечаем, что реализация детектора ориентиров хранится на сервере face++, и, таким образом, сообщаемое время включает сетевые коммуникации. запуск детектора локально значительно сократит время работы. получение коэффициентов am тестового изображения и сравнение их с коэффициентами целевой идентификации в базе данных занимает в среднем дополнительно 0,53 секунды. таким образом, на попытку проверки уходит в общей сложности 1,95 секунды (в среднем). система была реализована и протестирована в 64-разрядной среде matlab r2014b под управлением Windows 7, в 64-разрядной операционной среде с процессором Intel s i7 - 4790 с тактовой частотой 3,60 ГГц и 16 гб оперативной памяти. ожидается, что локальная реализация, использующая c, значительно увеличит время выполнения (хотя и не быстрее, чем на 1 мс). наш анализ конфиденциальности нацелен на злоумышленника, имеющего доступ к раздутому биометрическому `файлу паролей\", и разделен на три случая. первый сценарий, обсуждаемый в разделе [ sec : sub : noprior ], - это злоумышленник, который не имеет предварительных знаний о пользователях системы. такой злоумышленник пытается идентифицировать реальных пользователей среди поддельных. второй сценарий, обсуждаемый в разделе [ sec : sub : out_source ], касается злоумышленника, который пытается достичь той же цели, но имеет доступ к всеобъемлющему внешнему источнику изображений лиц, который адекватно представляет всемирные различия (популяцию) во внешности лиц, но не знает, кто такие пользователи. последний сценарий предполагает, что злоумышленник получил биометрические данные всех пользователей системы, кроме одного, и хочет использовать их для поиска биометрических данных оставшегося пользователя. мы обсуждаем этот случай в разделе [ sec : sub : facespace ]. сначала мы обсудим сценарий, в котором злоумышленник располагает полной базой данных (например, после взлома системы) и желает идентифицировать реальных пользователей, но не имеет предварительных знаний о реальных пользователях. более конкретно, это предположение означает, что у противника нет списка кандидатов и их биометрических данных, чтобы проверить, есть ли они в базе данных. файл с завышенным паролем - это файл, содержащий шаблоны лиц @xmath31, @xmath32 из которых соответствуют реальным лицам, а остальные @xmath33 - это синтетические лица, отобранные из того же пространства лиц, что и реальные лица. файл с имитированным паролем - это файл, содержащий шаблоны лиц @xmath31, все из которых являются синтетическими лицами, отобранными из одного и того же пространства лиц. злоумышленник, который может отличить файл с завышенным паролем от файла с имитированным паролем, может быть преобразован в злоумышленника, который извлекает всех реальных пользователей. аналогично, злоумышленник, который может извлекать реальных пользователей из файла паролей, может использоваться для различения файлов с завышенным и имитированным паролями. мы начнем с более простого случая, преобразующего злоумышленника, который может извлекать реальные лица, в средство различения между двумя файлами. сокращение довольно простое. если злоумышленник может извлечь реальные лица из файла паролей (и даже только одно реальное лицо), мы просто передаем ему полученный файл паролей. если злоумышленнику удается извлечь из него какое-либо лицо, мы делаем вывод, что мы получили файл паролей с завышенным значением. в противном случае мы приходим к выводу, что получили файл с имитированным паролем. легко видеть, что время выполнения атаки распознавания и вероятность ее успеха точно такие же, как и у первоначального злоумышленника, пытавшегося извлечь пароль. теперь предположим, что нам дан злоумышленник, который может отличить файл с завышенным паролем от смоделированного с вероятностью @xmath34. начнем с напоминания о том, что преимущество различения двух смоделированных паролей обязательно равно нулю. следовательно, можно сгенерировать гибридный аргумент для замены одного лица за раз в файле. когда мы заменяем синтетическое лицо другим синтетическим лицом, мы не меняем распределение файла. таким образом, преимущество уменьшается только тогда, когда мы заменяем реальное лицо синтетическим лицом, что предполагает, что если в системе есть @xmath32 реальных пользователя и всего пользователей @xmath31 в системе, мы можем успешно идентифицировать по крайней мере одного из реальных пользователей системы с вероятностью, большей или равно @xmath35, а время выполнения не более чем в @xmath31 раз превышает время выполнения отличающегося противника. [ cor_1 ] если распределения файла с завышенным паролем и файла с имитированным паролем статистически неотличимы, злоумышленник, не имеющий предварительных знаний (ни о биометрических данных пользователя, ни об именах пользователей), не сможет идентифицировать реальных пользователей.    теоретически синтетические и реальные лица отбираются из одного и того же распределения и, таким образом, неразличимы в соответствии со следствием [ cor_1 ]. Однако на практике синтетические лица отбираются из параметрического распределения, которое оценивается по реальным лицам. чем больше набор граней, используемый для оценки распределения, тем ближе будут эти распределения. на практике количество обучающих граней ограничено, что может привести к некоторым отклонениям между распределениями. наш следующий анализ показывает, что эти отклонения слишком малы, чтобы провести различие между распределениями реальных и синтетических лиц либо с помощью статистических тестов, либо с помощью человеческих наблюдателей. первая часть анализа выполняет статистическую проверку коэффициентов am реальных и синтетических граней и показывает, что эти распределения действительно очень близки друг к другу. вторая часть изучает распределение взаимных расстояний между реальными и синтетическими гранями и приходит к тому же выводу. наконец, мы проводим эксперимент на людях с реконструированными и смоделированными лицами, показывая, что даже люди не могут отличить их друг от друга. коэффициенты am хорошо аппроксимируются гауссовым распределением во всех измерениях @xcite. следовательно, выборка коэффициентов am для синтетических лиц из соответствующего распределения, вероятно, приведет к получению представлений, которые невозможно отличить при стандартной проверке гипотез от реальных идентичностей. примеры реального и синтетического распределений для первых 21 измерения показаны на рисунке [ fig : distr_ex ], и следующий анализ подтверждает это утверждение. во-первых, мы показываем, что коэффициенты реальных и синтетических граней не могут быть надежно различены на основе двух выборочных тестов Колмогорова-Смирнова (ks). с этой целью мы отобрали подмножество из 500 синтетических выборок из 80-мерной am и сравнили его с 500 векторами коэффициентов обучающих изображений. мы запустили ks-тест на этих двух наборах для каждого из 80 измерений и записали результат проверки гипотезы и соответствующее значение p. мы повторили этот тест 50 раз, варьируя набор синтетических граней. тесты ks подтвердили гипотезу о том, что две выборки получены из одних и тех же распределений в 98,72% случаев со средним значением p 0,6 (более 50 прогонов и 80 компонентов, т.е. 4000 тестов). Эти результаты показывают, что коэффициенты am реальных и синтетических лиц неразличимы при использовании двух выборок статистический тест. мы проанализировали распределения расстояний между реальными гранями, синтетическими и смесью того и другого. рисунок [ fig : dist_distr ] показывает, что эти распределения, как в случае евклидовых расстояний, так и в случае угловых расстояний, очень близки. следовательно, статистическое расстояние между ними незначительно, что позволяет предположить, что атаки, пытающиеся использовать взаимные расстояния, как ожидается, будут неэффективными. мы провели эксперимент на людях, состоящий из двух этапов. на первом этапе участникам показали реальное лицо, не использованное в эксперименте, и его реконструкцию. на втором этапе эксперимента каждому участнику был представлен один и тот же набор из 16 лиц (11 из которых были искусственными, а 5 - настоящими), и его попросили классифицировать их как настоящие или поддельные. мы также разрешили пользователям уклоняться от ответа в случае неуверенности или усталости. 11 синтетических граней были выбраны случайным образом из всех сгенерированных нами синтетических граней @xmath0, а 5 реальных граней были выбраны случайным образом из 500 реальных граней. для реальных лиц мы вычислили коэффициенты am для каждого реального изображения, а затем использовали метод, описанный в разделе [ sec : sub : recon ], для генерации реальных лиц и синтетических граней из модели. примеры реальных и искусственных лиц приведены во второй и третьей строках рисунка [ fig : face_samples ] соответственно.    из 179 полученных нами ответов 97 были правильными, что показывает показатель успешности 54,19%. фальшивые лица получили 120 ответов, из которых 66 были правильными (55%). настоящие лица получили 59 ответов, из которых 31 был правильным (52,5%). наш анализ показывает, что ответы для каждого лица распределяются очень похоже на результат биномиальной случайной величины с вероятностью успеха в каждом испытании 0,5. Далее мы анализируем случай, когда злоумышленник имеет доступ к раздутому `файлу паролей\" и к обширному внешнему источнику изображений лиц. ( например, Интернет ). мы рассматриваем два вектора атаки: первый пытается использовать запросы на членство со случайными изображениями лиц для сопоставления с реальными пользователями системы, второй пытается различать реальные и синтетические лица, используя процесс обучения на наборе реальных изображений лиц, не связанных с пользователями системы. злоумышленник может использовать другой источник изображений лиц, чтобы попытаться запустить запрос о членстве в системе honeyfaces для получения биометрических данных реальных пользователей. чтобы сопоставить случайное изображение из внешнего источника изображений лиц, злоумышленник должен выполнить попытку аутентификации со всеми пользователями системы (включая поддельных). наши эксперименты показывают, что текущая реализация занимает около 2 секунд на попытку аутентификации (в основном из-за привязки через face++). даже при нереалистичном предположении, что время аутентификации может быть сокращено до 1 мс, потребуется около @xmath36 секунд (чуть более 2 процессорных лет), чтобы выполнить сопоставление одного изображения лица с поддельными лицами @xmath37. мы отмечаем, что нельзя использовать технику для ускорения этого поиска и сравнения (например, kd - деревья), поскольку процесс сравнения граней требует их выравнивания (на основе ориентиров), что не может быть оптимизировано (насколько нам известно). можно попытаться определить принадлежность человека к системе, спроецировав его изображение на лицевое пространство системы и проанализировав расстояние от проекции до самого изображения. если бы пространство лиц было создано только для пользователей системы, небольшое расстояние могло бы выявить присутствие человека в пространстве лиц. такой атаки можно легко избежать, создав пространство лиц из достаточно большого (внешнего) источника лиц. такое пространство лиц приближает множество различных внешности (все комбинации людей в обучающем наборе), и, таким образом, люди, не связанные с пользователями системы, также будут близки к пространству лиц. мы приходим к выводу, что атака на членство для получения реальных лиц из базы данных нецелесообразна.      задача злоумышленника, получившего раздутый `файл биометрических паролей\", состоит в том, чтобы отличить реальные лица от искусственных. он может рассмотреть возможность использования классификатора, который был обучен разделятьотличить настоящие лица от поддельных. с этой целью злоумышленнику необходимо создать обучающий набор из реальных и синтетических лиц. синтетические лица могут быть сгенерированы с использованием пространства лиц системы. однако реальные лица системы недоступны злоумышленнику. один из способов, которым злоумышленник может подойти к этой проблеме, заключается в использовании другого набора реальных лиц (заменяющего набора) для построения пространства лиц. затем он может создать обучающий набор, сгенерировав синтетические лица, используя это пространство, и восстановив реальные лица из заменяющего набора, следуя алгоритмам, описанным в разделе [ sec : sub : generating ]. Затем обученный классификатор может быть использован для классификации лиц в биометрическом `файле паролей\". заменяющий обучающий набор, скорее всего, будет иметь характеристики, отличные от исходного. злоумышленник может попытаться объединить пространство лиц системы с заменяющим набором в попытке улучшить сходство обучающего набора с биометрическим `файлом паролей\". затем злоумышленник может создать обучающий набор реальных лиц, спроецировав изображения из заменяющего набора на смешанное пространство лиц и реконструируем их, как описано в разделе [ sec : sub : recon ]. чтобы создать обучающий набор синтетических лиц, противник может использовать либо смешанное пространство лиц, либо пространство лиц системы. глубокое обучение и, в частности, сверточные нейронные сети (cnn) показали производительность, близкую к человеческой при проверке лиц @xcite. распространено мнение, что успех cnn в задачах распознавания обусловлен его способностью извлекать хорошие черты. более того, было показано, что функции cnn могут быть успешно перенесены для выполнения задач распознавания в аналогичных областях (например, @xcite). такие методы называются тонкой настройкой или обучением переносу. это происходит путем замены верхних уровней полностью обученной сети dl (которая решает связанную проблему классификации) слоями, которые соответствуют новой задаче распознавания (новые слои инициализируются случайным образом). затем обновленная сеть обучается новой задаче классификации с меньшим набором данных. обратите внимание, что большая часть сети не требует обучения, требуется лишь небольшая настройка в соответствии с новой задачей классификации, а последний уровень может быть хорошо обучен, используя хорошие функции cnn и меньший набор данных.    следуя этой стратегии, мы взяли глубокую сеть vgg - face @xcite, которая была обучена распознавать 2622 объекта, и применили метод трансферного обучения для обучения dl-сети различать реальные и синтетические лица. с этой целью мы заменили последний полностью подключенный слой размером 2622 на полностью подключенный слой размером 2 и обучили эту новую архитектуру в следующих настройках.    во всех экспериментах мы разделяли обучающий набор для обучения и проверки сети. затем мы применили обученную сеть к подмножеству набора данных системы, чтобы классифицировать изображения на реальные и синтетические. подмножество включало все реальные лица и подмножество синтетических лиц (того же размера, что и реальный набор, чтобы сбалансировать результаты классификации). настройка 1: пространство лиц было построено из 500 лиц, принадлежащих заменяющему набору. обучающий набор включал 400 реконструированных реальных лиц и 400 синтетических лиц, сгенерированных с использованием пространства замещающих лиц. проверочный набор включал 100 реконструированных реальных лиц и 100 синтетических лиц из того же домена, не включенных в обучающий набор. результаты по набору проверки замещения показали, что сеть dl правильно классифицирует 62,5% лиц. результаты по набору системы снизились до 53,33%, что близко к случайному. задание 2: пространство лиц было создано путем объединения пространства лиц системы с заменяющим набором. обучающий набор включал 400 реальных лиц, спроецированных и реконструированных с использованием смешанного пространства лиц, и 400 синтетических лиц, сгенерированных с использованием смешанного пространства лиц. набор для проверки включал 100 реконструированных реальных лиц и 100 синтетических лиц из той же области, не включенных в обучающий набор. результаты набора для проверки показали хорошую классификацию: 75% синтетических лиц были классифицированы как синтетические, а 93% реальных лиц были классифицированы как реальные. однако та же сеть классифицировала все лица из набора лиц системы как синтетические. этот результат показывает, что использование смешанного пространства лиц для формирования обучающего набора неэффективно. основной причиной этого являются артефакты на синтетических изображениях из-за различий в условиях просмотра между наборами. настройка 3: реальные наборы для обучения и проверки были такими же, как в настройке 2. синтетические наборы для обучения и проверки были сформированы путем генерации синтетических лиц с использованием пространства лиц системы. здесь классификатор смог идеально классифицировать набор для проверки, но он классифицировал все лица системы как синтетические. это показывает, что использование реальных и синтетических лиц из разных лицевых пространств приводит к еще большим различиям между ними, которых нет в биометрическом `файле паролей\" системы. в заключение, современный классификатор глубокого обучения показал точность в 53,33% при различении реальных и искусственных лиц в биометрическом `файле паролей\" системы. этот результат близок к случайному угадыванию. злоумышленник, получивший изображения лиц всех реальных пользователей системы, кроме одного, может попытаться использовать их для извлечения информации об оставшемся пользователе из файла паролей. если обучающий набор, используемый для построения пространства лиц, содержит только пользователей системы, сработает следующая простая атака: напомним, что процедура аутентификации требует удаления среднего лица из изображения лица, полученного в процессе аутентификации. таким образом, среднее значение всех лиц в обучающем наборе сохраняется в системе. злоумышленник может найти последнего пользователя, вычислив среднее значение пользователей, которыми он владеет, и решив простое линейное уравнение. чтобы смягчить эту атаку и обеспечить лучшее моделирование внешнего вида лица, обучающий набор должен содержать значительное количество обучающих лиц, которые не являются пользователями системы. обратите внимание, что эти дополнительные лица должны быть отброшены после построения пространства лиц. предполагая, что обучающий набор для построения пространства лиц не был ограничен набором пользователей системы (как это имеет место в нашей реализации), злоумышленник мог бы попробовать следующую атаку. создайте пробелы для лиц @xmath38, добавляя каждое неизвестное лицо из биометрического `файла паролей\" по очереди к реальным лицам @xmath39, которые находятся в распоряжении противника. @xmath40 равно количеству искусственных лиц в биометрическом `файле паролей\" плюс одно реальное лицо. затем сравните эти пространства лиц @xmath40 с тем, которое хранится в системе (используя статистическое расстояние между распределениями). такое сравнение позволяет ранжировать неизвестные лица, чтобы они были реальным лицом @xmath32. если атака эффективна, мы ожидаем, что пространство лиц, включающее пользователя @xmath32th, будет иметь высокий рейтинг (т.е. появится в небольшом процентиле). однако, если распределение рейтингов, связанных с пространством лиц, включающим реальное лицо @xmath32, по случайным разделениям известного лица @xmath39 и 1 неизвестного лица (близко к) равномерному, то мы можем заключить, что злоумышленник не получает никакой информации о последнем пользователе, использующем эту атаку.    в нашей реализации атаки мы предполагаем, что злоумышленнику известны 269 лиц реальных пользователей, и он пытается идентифицировать последнего реального пользователя среди синтетических. выполнение атаки со всеми синтетическими лицами требует много времени. чтобы получить статистику ранжирования, мы можем использовать гораздо меньшее подмножество синтетических лиц. в частности, мы использовали 100 синтетических лиц и провели эксперимент над 100 рандомизированными разбивками на 269 известных и 1 неизвестное лица. на рисунке [ fig : dist_rankings ] показана гистограмма ранжирования, связанная с пространством лиц, включая последнего реального пользователя в 100 экспериментах. гистограмма подтверждает, что распределение ранжирования действительно равномерное, что делает атаку неэффективной. альтернативный подход, который может использовать злоумышленник, заключается в анализе влияния одного лица на распределение пространства лиц. однако наши эксперименты показывают, что статистические расстояния между соседними распределениями (т.е. сгенерированными из обучающих наборов, отличающихся одним лицом) незначительны. в частности, среднее статистическое расстояние между распределением, оцененным по полному обучающему набору (из 500 реальных лиц), и всеми возможными наборами из 499 лиц (образующими 500 соседние множества, каждое из которых состоит из другого подмножества из 499 граней ) равно @xmath41, а максимальное расстояние равно @xmath42. эти расстояния незначительны по сравнению со стандартными отклонениями гауссианов пространства лиц (наибольшее стандартное значение равно 6 473,7, а наименьшее - 304,1717 ). эти небольшие различия позволяют предположить, что можно использовать механизмы дифференциальной конфиденциальности без (или незначительной) потери удобства использования (например, используя идеи, связанные с @xcite ) для смягчения атак, основанных на предварительных знаниях пользователей системы. мы оставляем реализацию и оценку этого механизма для будущих исследований.    в заключение, система honeyfaces защищает конфиденциальность пользователей даже в крайнем случае, когда злоумышленник узнал всех пользователей, кроме одного, предполагая, что обучающий набор для построения пространства лиц содержит достаточно большой набор дополнительных лиц. теперь мы обсудим различные сценарии, в которых honeyfaces повышает безопасность биометрических данных. мы начнем с обсуждения сценария сетей с ограниченной пропускной способностью исходящих данных (таких как сети с воздушным зазором) и покажем влияние увеличения размера файла на время эксфильтрации. далее мы обсудим влияние honeyfaces на обнаружение процесса эксфильтрации. мы завершаем анализ безопасности, предлагаемой нашим решением, в сценарии частичного раскрытия базы данных. время, необходимое для эксфильтрации файла, легко определяется размером файла, подлежащего эксфильтрации, и пропускной способностью. когда пропускная способность эксфильтрации очень низкая (например, в воздухе - сети gap, изученные в @xcite ), 640-байтовое представление лица (или 5120-битное) занимает от 5 секунд (при скорости 1000 бит в секунду) до 51 секунды (при более реалистичной скорости 100 бит в секунду). следовательно, утечка даже базы данных объемом 1 Гбайт занимает от 92,6 до 926 дней (при условии полной пропускной способности и отсутствия необходимости в синхронизации или исправлении ошибок). размер файла паролей можно увеличить, чтобы он содержал все созданные нами лица @xmath0, в результате чего размер файла составит 56,6 тбайт (утечка которого при более высокой скорости заняла бы около 14 350 лет).    возможным способом уменьшить размер файла является сжатие файла. наши эксперименты показывают, что zip-файл Linux версии 3.0 может сжать файл паролей всего на 4%. крайне маловероятно, что можно разработать алгоритм сжатия, который позволяет сжимать значительно больше. другими словами, сжатие файла face сокращает количество дней для эксфильтрации 1 гбайт до 88,9 дней (при более высокой скорости). можно рассмотреть алгоритм сжатия с потерями, например, используя только коэффициенты, связанные с основными компонентами (несущими большую часть информации). в разделе [ sec : sub : rates ] мы показываем, что этот подход требует использования множества коэффициентов для идентификации. следовательно, мы приходим к выводу, что если пропускная способность ограничена, эксфильтрация всей базы данных в приемлемые сроки невозможна. улучшенное обнаружение утечек связано с двумя возможными средствами защиты: использованием систем обнаружения вторжений (и продуктов для предотвращения потери данных) и использованием настроек с двумя серверами, как в honeywords. системы обнаружения вторжений, такие как snort, отслеживают сеть на предмет подозрительных действий. например, высокая частота исходящих dns-запросов может указывать на попытку эксфильтрации и вызывать тревогу @xcite. подобные попытки эксфильтрации также могут повысить вероятность обнаружения утечки данных (например, когда конечная машина изменяет свой http-адрес и начинает отправлять большой объем информации на какой-либо внешний сервер). следовательно, злоумышленник, который не принимает во внимание эти инструменты, с большой вероятностью будет пойман. с другой стороны, ожидается, что противник, который попытается `залечь на дно\", будет иметь сниженную скорость эксфильтрации, предотвращая быструю утечку и возвращаясь к сценарию, рассмотренному в предыдущем разделе. использование honeyfaces также позволяет настроить аутентификацию на двух серверах аналогично honeywords @xcite. первый сервер использует базу данных, состоящую из реальных и искусственных лиц. после успешной попытки входа в эту систему второй запрос аутентификации отправляется на второй сервер, на котором хранятся только реальные пользователи системы. таким образом, успешная аутентификация на первом сервере, использующем поддельную учетную запись, обнаруживается на втором сервере, вызывая тревогу. мы показали, что удаление всего файла паролей за приемлемое время неосуществимо, если пропускная способность ограничена. следовательно, злоумышленник может решить выбрать один из двух подходов (или объединить их) при попытке эксфильтрации файла, либо допустить утечку только частичной базы данных (возможно, с улучшенным соотношением реальных лиц к синтетическим), либо допустить утечку частичных представлений, таких как первые 10 коэффициентов am из 80 для каждого пользователя.    как мы показали в анализе конфиденциальности (раздел [ sec : privacyanalysis ] ), статистические тесты или методы машинного обучения не позволяют идентифицировать реальные лица среди синтетических. использование запросов о членстве для поиска реальных лиц в базе данных является вычислительно неосуществимым без предварительного знания реальных имен пользователей. мы приходим к выводу, что уменьшить размер набора данных путем идентификации реальных пользователей или значительно улучшить соотношение реального и синтетического невозможно.    второй вариант - утечка меньшего числа коэффициентов (частичное представление). утечка меньшего числа коэффициентов может быть произведена быстрее, чем всей записи, и позволит злоумышленнику запустить в своей системе (возможно, с большей вычислительной мощностью) любой алгоритм, который он пожелает для идентификации реальных пользователей. далее мы покажем, что частичные представления (которые значительно уменьшают размер набора данных) не предоставляют достаточной информации для успешных запросов на членство. мы поэкспериментировали с 10 коэффициентами (т.е. предположим, что злоумышленник слил первые 10 коэффициентов am всех пользователей). поскольку злоумышленник не знает фактического порогового значения для 10 коэффициентов, он может попытаться приблизить это значение, используя базу данных. предлагаемый нами метод такой оценки основан на вычислении распределения расстояний для 30 000 лиц из базы данных и установлении порога аутентификации, соответствующего 0,01% `процентилю\" взаимных расстояний. затем мы берем тестовые наборы лиц реальных пользователей и лиц посторонних лиц и для каждого лица из этих наборов вычисляем минимальное расстояние от этого лица до всех лиц в сокращенном файле биометрических паролей. мы предполагаем, что если это расстояние меньше порогового значения, то лицо было в системе, в противном случае мы приходим к выводу, что лица в ней не было. наши эксперименты показывают, что при пороговом значении 0,01% 98,90% выборки аутсайдеров и 99,26% реальных пользователей были ниже порогового значения. другими словами, практически нет разницы между вероятностью определения того, что пользователь системы действительно является пользователем, и вероятностью определения того, что посторонний является пользователем системы. это подтверждает утверждение о том, что 10 коэффициентов недостаточны для проведения различия между реальными пользователями и посторонними. мы также использовали меньший порог, который пытался максимизировать вероятность успешного сопоставления аутсайдера с реальным лицом. при этом меньшем пороге 71,08% аутсайдеров оказались ниже него по сравнению с 74,07% реальных пользователей.    чтобы дополнительно проиллюстрировать влияние частичного представления на реконструированное лицо, мы показываем на рисунке [ fig : grad_rec ] реконструкцию лиц с коэффициентами 80, 30 и 10 по сравнению с реальным лицом. как можно видеть, лица, реконструированные по 30 коэффициентам, в некоторой степени связаны с исходным лицом, но лица, реконструированные по 10 коэффициентам, мало похожи на оригинал. хотя возможно сопоставить искаженное лицо с соответствующим оригиналом, когда показано небольшое количество граней (рисунок [ fig : grad_rec ] ), визуальное сопоставление невозможно среди граней @xmath0. таким образом, злоумышленник, желающий получить частичную информацию об изображении, должен получить более 10 коэффициентов.    в заключение, удаление даже частичного набора лиц (или частей записей) не является вероятным вектором атаки на систему honeyfaces. в этой статье мы исследовали использование синтетических лиц для повышения безопасности и конфиденциальности схем аутентификации на основе лиц. мы предложили новый механизм расширения базы данных пользователей (honeyfaces), который гарантирует конфиденциальность пользователей без потери удобства использования. кроме того, honeyfaces обеспечивает повышенную устойчивость к эксфильтрации (как к самой эксфильтрации, так и к ее обнаружению). мы также показали, что этот механизм не мешает основной роли аутентификации системы и что идея позволяет внедрить решение для аутентификации с двумя серверами, как в honeywords. в будущей работе можно изучить применение идеи honeyfaces к другим биометрическим признакам (таким как радужная оболочка глаза и отпечатки пальцев). мы считаем, что из-за сходной природы кодов радужной оболочки глаза (которые также следуют многомерному гауссову распределению) применение этой концепции будет довольно простым. 

одной из основных проблем, с которыми сталкиваются системы аутентификации на основе биометрических данных, является необходимость обеспечения безопасной аутентификации при сохранении конфиденциальности биометрических данных. предыдущие решения, такие как secure sketch и fuzzy extractors, основывались на предположениях, которые невозможно гарантировать на практике, и часто влияют на точность аутентификации.    в этой статье мы представляем honeyfaces: концепцию добавления большого набора искусственных лиц (неотличимых от реальных) в биометрический `файл паролей\". это расширение пароля защищает конфиденциальность пользователей и повышает безопасность системы, не влияя на точность аутентификации. в частности, конфиденциальность для реальных пользователей обеспечивается за счет `сокрытия\" их среди большого количества поддельных пользователей (поскольку распределение синтетических и реальных лиц одинаково). в дополнение к поддержанию точности аутентификации и, таким образом, не влиянию на безопасность процесса аутентификации, honeyfaces предлагает несколько улучшений безопасности: повышенную надежность фильтрации, улучшенное обнаружение утечек и возможность использовать настройки с двумя серверами, как в honeywords. наконец, honeyfaces можно комбинировать с другими механизмами обеспечения безопасности и конфиденциальности биометрических данных. мы внедрили систему honeyfaces и протестировали ее с файлом паролей, состоящим из 270 реальных пользователей. затем `файл паролей\" был увеличен, чтобы вместить до пользователей @xmath0 (в результате получился `файл паролей\" объемом 56,6 тб). в то же время, включение дополнительных лиц не влияет на показатель истинного или ложного принятия, который составил 93,33% и 0,01% соответственно. биометрия (контроль доступа), распознавание лиц, конфиденциальность