пороговые сети получаются путем присвоения веса @xmath1 из распределения @xmath2 каждому из узлов @xmath3 и соединения любых двух узлов @xmath4 и @xmath5, суммарные веса которых превышают определенный порог, @xmath6 : @xmath7 @xcite. пороговые сети могут быть созданы из (почти) произвольных степенных распределений, включая безмасштабные, путем разумного выбора распределения веса @xmath2 и порога @xmath6, и они охватывают удивительно широкий спектр важных архитектур: от звездного графика (простая мультяшная \"модель безмасштабных графов, состоящая из единый концентратор ) с его низкой плотностью ссылок, @xmath8, на полный график. широко изученные в литературе по теории графов @ xcite, они недавно привлекли внимание статистиков и нелинейных физиков благодаря прекрасной работе Хагберга, Сварта и Шульта @ xcite.   , и (б) его прямоугольное представление, подчеркивающее модульность. узлы добавляются по одному снизу вверх, @xmath9 s слева и @xmath10 s справа.,scaledwidth=35,0% ] хагберг _ и др., используют тот факт, что пороговые графики могут быть более элегантно закодированы двухбуквенной последовательностью, соответствующей двум типам из узлов @xmath9 и @xmath10 @xcite. по мере введения новых узлов, в соответствии с предписанной последовательностью, узлы типа @xmath9 не подключаются ни к одному из существующих узлов, в то время как узлы типа @xmath10 подключаются ко всем узлам любого типа: @xmath11 и @xmath12. на рис. [ graph_box](a ) мы показываем пример порогового графа, полученного из последовательности @xmath13. обратите внимание на _ модульную _ структуру пороговых графов: подпоследовательность @xmath14 последовательных @xmath10 s порождает @xmath15-клику, в то время как узлы в подпоследовательности @xmath9 s соединяются с Узлы @xmath10 после этого, но не между собой. мы подчеркиваем эту модульность диаграммой блоков (аналогично @xcite): овальные блоки заключают узлы типа @xmath9, которые не связаны между собой, в то время как прямоугольные блоки заключают @xmath16-клики @xmath10-узлы @xcite. связь между двумя блоками означает, что все узлы в одном блоке соединены со всеми узлами в другом, рис. [ graph_box](b ).    учитывая последовательность пороговой сети, существуют быстрые алгоритмы для вычисления важных структурных критериев, помимо ее модульности, таких как распределение степеней, треугольники, центральность промежуточности, а также спектр и собственные векторы графа laplacian @ xcite. последние являются важнейшим фактором, определяющим динамику и синхронизацию, и имеют приложения для разбиения графов и обработки сеток @xcite. возможно, что еще более важно, таким образом становится возможным _ проектировать _ пороговые сети с определенным распределением степеней, спектром собственных значений и т.д., @xcite.    несмотря на свою податливость, пороговые сети ограничены некоторыми очевидными способами, например, их диаметр равен 1 или 2, независимо от количества узлов @xmath3. наша идея состоит в изучении более широкого класса сетей, которые могут быть построены из последовательности (образованной из двух или более букв) по детерминированным правилам связности сами по себе. именно это свойство придает сетям все их желаемые характеристики: модульность (как в сложных сетях повседневной жизни), легко вычисляемые структурные показатели, включая возможность проектирования, и высокую степень сжимаемости. грубо говоря, каждая дополнительная буква алфавита позволяет увеличить диаметр сетей на одно звено, так что трехбуквенные сети имеют диаметр 3 или 4 (некоторые из новых типов двухбуквенных сетей имеют диаметр 3). однако это скромное увеличение очень значительно, учитывая тот факт, что диаметр многих сложных сетей повседневной жизни ненамного больше, чем у xcite. сети последовательностей дают нам большую свободу в выборе типов сетей, которые могут быть описаны таким элегантным способом, сохраняя при этом большую аналитическую привлекательность пороговых сетей. еще одно необычное свойство сетей последовательностей заключается в том, что любой ансамбль сетей последовательностей допускает естественное упорядочение; просто перечислите их в алфавитном порядке в соответствии с их последовательностями. можно использовать это упорядочение для изучения собственных значений и других структурных свойств сетей последовательностей.    в этой статье мы впервые рассмотрим общий класс сетей последовательностей. в разделе [двухбуквенный ] мы систематически исследуем все возможные правила создания сетей связанных последовательностей из двухбуквенного алфавита. применяя аргументы симметрии, мы обнаруживаем, что пороговые сети являются только одним из трех классов эквивалентности, характеризующихся наивысшим уровнем симметрии. затем мы обсудим оставшиеся два класса, показав, что также существует высокая степень модульности и что различные структурные свойства могут быть легко вычислены. любопытно, что новые классы сетей с двухбуквенной последовательностью могут быть связаны с обобщенной формой пороговых сетей, где разница @xmath17, а не сумма весов, равна разнице по сравнению с порогом @xmath6.    в разделе [трехбуквенный ] мы выводим все возможные формы связанных сетей с тремя последовательностями. аргументы симметрии приводят нас к открытию 30 различных классов эквивалентности. среди этих классов мы выделяем естественное расширение пороговых сетей до сетей с трехбуквенными последовательностями. несмотря на расширенный алфавит, сети с трехбуквенными последовательностями сохраняют многие желательные свойства сетей с пороговыми и двухбуквенными последовательностями. мы также показываем, что по крайней мере некоторые из сетей последовательностей из 3 букв могут быть преобразованы в пороговые сети с двумя пороговыми значениями вместо одного. в заключение мы приведем краткое изложение и обсуждение открытых проблем в разделе [заключение ]. рассмотрим графики, которые могут быть построены из последовательностей @xmath18 из двух букв @xmath9 и @xmath10. мы можем представить любое возможное правило с помощью матрицы @xmath19 * r *, элементы которой указывают, соединяются ли узлы типа @xmath4 с узлами типа @xmath5: @xmath20, если узлы соединяются, и 0 в противном случае ( @xmath21 означает @xmath22, соответственно). [ graph_box ] приводит пример графика, полученного из последовательности @xmath13, применяя правило _ threshold _ @xmath23. поскольку каждый элемент может быть @xmath24 или @xmath25 независимо от других, существуют возможные правила @xmath26. однако мы проигнорируем четыре правила, которые не могут связать @xmath9 и @xmath10, @xmath27, поскольку они дают простые _ непересекающиеся _ графики двух типов узлов: @xmath28 дает только изолированные узлы, @xmath29 дает один полный граф типа @xmath9 и один типа @xmath10, @xmath30 дает полный граф типа @xmath9 и изолированные узлы типа @xmath10 и т.д.     примененные к последовательности @xmath13 ( a ), и из @xmath31, примененные к обратной последовательности @xmath32 (b), идентичны.,scaledwidth=35,0% ] список оставшихся правил можно еще больше сократить, рассмотрев два вида симметрий: (a) перестановку и ( b ) обращение времени вспять. _ перестановка _ - это симметрия, полученная путем перестановки между двумя типами узлов, @xmath33. таким образом, перестановочное правило (@xmath34 и @xmath35 ), действующее на перестановочную последовательность (@xmath36 ), возвращает исходный граф @xcite. _ обращение времени _ - это симметрия, получаемая путем обращения стрелок (\"время\" ) в правилах связности или транспонирования @xmath37. транспонированное правило, действующее на обратную последовательность @xmath38, возвращает исходный график. две операции симметрии сами по себе обратны и образуют группу симметрий. в частности, можно объединить две симметрии: правило с @xmath34, примененное к обратной последовательности с инвертированными типами @xmath39, возвращает исходный график, см. рис. [ time_reversal ]. все четыре правила @xmath40 эквивалентны и генерируют пороговые графики. @xmath41 - это правило для пороговых графов, используемое Хагбергом и др., @xcite, а @xmath42 эквивалентно ему путем перестановки. @xmath31 получается из @xmath41 путем обращения времени вспять и перестановки (рис. [ time_reversal ] ), а @xmath43 получается из @xmath41 путем обращения времени вспять. два правила @xmath44 эквивалентны либо перестановкой, либо обращением времени вспять и генерируют нетривиальные двудольные графы, которые отличаются от пороговых сетей (рис.  [ abgraphs ] ). правило @xmath45 генерирует полные двудольные графы. однако полный двудольный граф @xmath46 также может быть создан путем применения @xmath47 к последовательности @xmath48 из @xmath49 @xmath9 s, за которой следуют @xmath50 @xmath10 s, поэтому правило @xmath51 является `вырожденной\" формой @xmath47. можно было видеть, что это так с самого начала, из-за симметричных соотношений @xmath52, @xmath11: они делают порядок @xmath9 и @xmath10 в последовательности графа несущественным. по тому же принципу @xmath53 и @xmath54 являются вырожденными формами @xmath41 и @xmath42 соответственно. они дают пороговые графики с разделенными последовательностями @xmath9 s и @xmath10 s.    два правила @xmath55 эквивалентны либо перестановкой, либо обращением времени вспять и генерируют нетривиальные графики, отличные от пороговых графиков и графиков, созданных @xmath47 (рис.  [ abgraphs ] ). наконец, правило @xmath56 является вырожденной формой @xmath57 (или @xmath58 ) и дает только полные графики (которые являются пороговыми графами, поэтому @xmath59 также включается в @xmath60 )., применяя правила @xmath47 (a ), @xmath41 (b ), и @xmath57 ( c ). обратите внимание на симметрию рисунка и фона (a ) и ( c ): графики являются обратными или дополняющими друг друга (см. текст). обратная сторона порогового графика (b) также является (двухкомпонентным) пороговым графом, полученным из той же последовательности и применяющим правило @xmath42 (дополнение @xmath41).,scaledwidth=47,0% ] подводя итог, @xmath41, @xmath47 и @xmath57 являются единственными двумя - буквенные правила, которые генерируют различные классы нетривиальных связных графов. существует еще один забавный тип симметрии: применение @xmath47 и @xmath57 к одной и той же последовательности приводит к _ дополнительному _ или _ обратному _ графам, узлы которых смежны в обратном графе тогда и только тогда, когда они _ не _ связаны в исходномобщий график. симметрия фигуры и фона, проявляющаяся в правилах @xmath47 и @xmath57 ( @xmath61 ), также проявляется в графиках, которые они создают (рис. [ абграфы]a, c ). с другой стороны, обратные пороговые графы также являются пороговыми графами. кроме того, дополнение порогового правила, применяемое к дополнительной (инвертированной) последовательности, возвращает исходный граф. в этом смысле пороговые графы обладают максимальной симметрией. @xmath47-графики обычно менее плотные, а @xmath57-графики обычно более плотные, чем пороговые графики.     возможные соединения между узлами типа @xmath9 и @xmath10. ( b ) три эквивалентных представления порогового правила @xmath41. вторая и третья диаграммы получены путем перестановки меток и обращения времени вспять соответственно. ( c ) диаграммы для @xmath47 и @xmath57. обратите внимание, как они дополняют друг друга для полного набора соединений в части (a).,scaledwidth=25,0% ] правила подключения имеют дополнительную полезную интерпретацию в виде ориентированных графов, где узлы представляют буквы алфавита последовательности, направленную ссылку, например, от @xmath9 до @xmath10 указывает на правило @xmath52, а соединение типа с самим собой обозначается автоциклом (рис. [ graph_notation ] ). поскольку правила одинаковы при перестановке типов, на самом деле нет необходимости помечать узлы: все изоморфы графа представляют одно и то же правило. аналогично, симметрия обращения времени означает, что графики с перевернутыми стрелками также эквивалентны. обратите внимание, что направление собственных циклов в этом отношении не имеет значения, поэтому мы просто принимаем их как ненаправленные. мы будем широко использовать это обозначение для анализа сетей последовательностей из 3 букв в разделе [трехбуквенные ]. совершенно особым свойством сетей последовательностей является тот факт, что любой произвольный ансамбль таких сетей обладает естественным упорядочением, просто перечисляя сети в алфавитном порядке в соответствии с их последовательностями. напротив, подумайте, например, об ансамбле случайных графов erds - rnyi узлов @xmath3, где ссылки присутствуют с вероятностью @xmath49: нет естественного способа упорядочить графы @xmath62 в ансамбле @xcite.    сопоставление структурного свойства с алфавитным порядком ансамбля раскрывает некоторую внутреннюю структуру самого ансамбля, позволяя по-новому взглянуть на природу сетей. в качестве примера на рис. [ eigs_2threshold ] мы показываем @xmath63, второе наименьшее собственное значение, для ансамбля связанных пороговых сетей, содержащих узлы @xmath64 (в ансамбле есть графики @xmath65, поскольку все их последовательности должны начинаться с буквы @xmath9). обратите внимание на красивый узор, за которым следуют собственные значения, построенные таким образом, который напоминает фрактал или дерево Кэли: значения в первой половине графиков на оси @xmath1 повторяются во второй половине, и узор повторяется по мере дальнейшего увеличения изображения. узлы, построенные в соответствии с их алфавитным порядком.,scaledwidth=45,0% ] структурные свойства новых классов сетей с двухбуквенной последовательностью, @xmath47 и @xmath57, выводятся так же легко, как и для пороговых сетей. здесь мы сосредоточимся только на @xmath47, который образует подмножество двудольных графов. анализ для @xmath57 очень похож и часто может быть тривиально получен из дополнительной симметрии двух классов. все связанные сети последовательностей в классе @xmath47 должны начинаться с буквы @xmath9 и заканчиваться буквой @xmath10. последовательность такого рода может быть представлена более компактно @xcite номерами @xmath9 и @xmath10 в чередующихся слоях, @xmath66. мы предполагаем, что существуют узлы @xmath3 и слои @xmath14 (@xmath14 четный ). мы также используем обозначения @xmath67 и @xmath68 для общего числа @xmath9 и @xmath10, а также @xmath69 и аналогично для @xmath70. наконец, поскольку все узлы в слое обладают идентичными свойствами, мы обозначаем любой @xmath9 в @xmath4-м слое @xmath71 и любой @xmath10 в @xmath5-м слое @xmath72. имея в виду это обозначение, мы переходим к обсуждению нескольких структурных свойств.    : поскольку @xmath9 s подключается только к последующим @xmath10 s (а @xmath10 s только к предыдущим @xmath9 s ), степень @xmath73 узлов задается @xmath74 : в сетях @xmath47 нет треугольников, поэтому кластеризация всех узлов равна нулю.    : каждый @xmath9 подключен к последнему @xmath10, поэтому расстояние между любыми двумя @xmath9 s равно 2. каждый @xmath10 подключен к первому @xmath9 в последовательности, поэтому расстояние между любыми двумя @xmath10 s также равно 2. расстояние между @xmath75 и @xmath76 равно 1, если @xmath77 (они подключаются напрямую), и 3, если @xmath78 ( @xmath75 ссылается на @xmath79, который ссылается на @xmath80, который ссылается на @xmath76 ).    : из-за симметрии обращения времени между @xmath9 и @xmath10 достаточно проанализировать только узлы @xmath10. результат для @xmath9 затем может быть получен простым изменением последовательности создания и перестановкой букв. расстояние между вершинами @xmath81 и узлом @xmath82 определяется как : @xmath83, где @xmath84 - это количество кратчайших путей от узла @xmath85 до @xmath86 ( @xmath87 ), исключая случаи, когда @xmath88 или @xmath89. @xmath90 - это число кратчайших путей от @xmath85 до @xmath86, проходящих через @xmath82. коэффициент @xmath91 отображается для неориентированных графов, поскольку каждая пара подсчитывается дважды при суммировании. расстояние между @xmath10 s может быть вычислено рекурсивно от нижних слоев к более высоким. в первом b - слое @xmath92 и @xmath93 для @xmath94. второй член в rhs учитывает кратчайшие пути от слоя @xmath95 к самому себе и ко всем предыдущим слоям @xmath9, а третий член соответствует путям от @xmath95 к @xmath72 к @xmath71 ( @xmath96 ) к @xmath97. хотя эта рекурсия может быть решена явно, ее лучше оставить в таком виде, поскольку она, таким образом, подчеркивает тот факт, что центральность промежуточности возрастает от одного уровня к другому. другими словами, сети являются _ модульными_, где каждый дополнительный уровень @xmath10 доминирует над всеми нижележащими уровнями.    : в отличие от пороговых сетей, для сетей @xmath47 собственные значения являются _ not _ integer, и, похоже, нет простого способа их вычислить. вместо этого мы сосредоточимся только на вторых наименьших и наибольших собственных значениях, @xmath63 и @xmath98, из-за их важной динамической роли: чем меньше отношение @xmath99, тем более восприимчива сеть к синхронизации @xcite. рассмотрим сначала @xmath63. для @xmath47 легко показать, что как _ вершинная _, так и _ реберная связность _ равны @xmath100. затем, следуя неравенству в @xcite, @xmath101 верхняя граница кажется более строгой и является разумным приближением к @xmath63 (см. рис.  [ l2bounds ] ). сети с @xmath64 в соответствии с их алфавитным порядком (сплошная кривая) и их верхней и нижней границами (пунктирные линии).,scaledwidth=40,0% ] для @xmath98, используя теорему 2.2 из @xcite, можно вывести границы @xmath102, но они не кажутся очень полезными, численно. играя с различными структурными свойствами сетей, построенными в соответствии с их алфавитным порядком, мы наткнулись на приближение @xmath103, где @xmath104 - средняя степень графика, см. рис.  [ l2approx ]. аппроксимация точна для двудольных _ полных _ графов ( @xmath105 ), и относительная погрешность медленно увеличивается с @xmath3; она составляет примерно 10% для @xmath106.     сети с @xmath64 в соответствии с их алфавитным порядком (сплошная кривая) и его приблизительным значением (пунктирная линия).,scaledwidth=40,0% ] в @xcite было показано, что пороговые графики имеют отображение в сеть последовательностей с уникальной последовательностью (в соответствии с пороговым правилом \" @xmath41) ; и и наоборот, для любой сети последовательностей @xmath41 существует набор весов @xmath107 узлов (не обязательно уникальных), такой, что соединение любых двух узлов, удовлетворяющих @xmath7, воспроизводит сеть последовательностей. здесь мы устанавливаем аналогичную связь между сетями последовательностей @xmath47- (или @xmath57- ) и другим типом пороговой сети, где связность определяется разницей @xmath17, а не суммой весов. мы начинаем с отображения взвешенного набора узлов в сеть @xmath47-последовательности. пусть набор узлов @xmath3 имеет веса @xmath107 ( @xmath108 ), взятые из некоторой плотности вероятности, и мы предполагаем @xmath109, без потери общности. обозначьте узлы с @xmath110 как тип @xmath9, а узлы с @xmath111 как тип @xmath10. наконец, соедините любые два узла @xmath4 и @xmath5, которые удовлетворяют @xmath112. результирующий граф может быть построен с помощью уникальной последовательности по правилу @xmath47, полученной следующим образом. для удобства перепишите набор весов как @xmath113, где первые веса @xmath114 соответствуют @xmath9-узлам, а остальные - @xmath10-узлам. обозначим последовательность создания @xmath18 и определим @xmath115 по алгоритму (в псевдокоде): установите @xmath116, @xmath117 для @xmath118, сделайте : 0,4 см, если @xmath119 0,8 см, установите @xmath120 и @xmath121 0,4 см, еще 0,8 см, установите @xmath122 и @xmath123 end. понятно, что если @xmath124 исчерпан до конца цикла, оставшиеся @xmath10-узлы автоматически прикрепляются к концу последовательности (и аналогично для @xmath125 ). например, используя этот алгоритм, мы обнаруживаем, что график \"разница - порог\", полученный из набора весов @xmath1261,2,3,5,7,16,17,20@ xmath127 и @xmath128, могут быть воспроизведены из последовательности @xmath13 с правилом @xmath47. рассмотрим теперь обратную задачу: учитывая граф, созданный из последовательности @xmath18 с помощью правила @xmath47, мы получаем (неуникальный) набор весов @xmath129 таким образом, что соединение любых двух узлов с помощью @xmath112 приводит к одному и тому же графу. сначала перепишите последовательность создания в ее компактную форму @xmath130 и назначьте веса @xmath131 для узлов @xmath9 в слое @xmath131, веса @xmath132 для узлов @xmath10 в слое @xmath0 и установите пороговое значение на @xmath133. например, последовательность @xmath13 имеет компактное представление @xmath134 со слоями @xmath135, so три @xmath9 в слое @xmath25 имеют веса @xmath25, два @xmath10 в слое @xmath136 имеют веса @xmath137, два @xmath9 в слое @xmath138 имеют веса @xmath138, а один @xmath10 в слое @xmath139 имеет вес @xmath140. веса @xmath141 с порогом подключения @xmath142 воспроизводят исходный график. графики последовательностей, полученные из правила @xmath57, также могут быть сопоставлены с графиками пороговых значений разности точно таким же образом, только тогда критерием для соединения двух узлов является @xmath143, а не @xmath112, как для @xmath47. отображение сетей последовательностей в обобщенные пороговые графы может быть полезно при анализе некоторых их свойств, например, для нахождения _изопериметрического числа _ графа последовательностей @xcite. с трехбуквенным алфавитом, @xmath144, изначально существуют возможные правила @xmath145. опять же, они могут быть значительно сокращены из-за симметрии. поскольку матрица правил содержит 9 элементов (нечетное число), ни одно правило не может быть идентичным своему дополнению. таким образом, мы можем ограничиться правилами, содержащими не более 4 ненулевых элементов, и применить аргументы симметрии, чтобы уменьшить их объем, в самом конце мы можем затем добавить дополнения к остальным правилам.    на рис. [ 3nets ] мы перечисляем все возможные трехбуквенные правила с двумя, тремя и четырьмя взаимодействиями. правила, которые приводят к несвязанным графам, и симметричные правила (путем перестановки меток или обращения времени вспять) на рисунке опущены.     и @xmath146 ), а правила 3, 12, 13 и 14 являются вырожденными случаями правил 2, 6, 7 и 6, соответственно. это оставляет нас с пятнадцатью различными трехбуквенными правилами (подчеркнуто) и пятнадцатью дополнениями к ним, в общей сложности для 30 различных классов сетей последовательностей из трех букв.,scaledwidth=40,0% ] правило 2 @xcite на самом деле не ново: идентификация узлов типа @xmath9 и @xmath146 (как отмечено в правиле 1 на рисунке ) мы можем легко видеть, что правило идентично двухбуквенному правилу 8. таким же образом правило 7 совпадает с двухбуквенным пороговым правилом 4. правило 3 является вырожденной формой 2: из-за двойного соединения @xmath147 и @xmath148, порядок, в котором @xmath10 и @xmath146 появляются в последовательности относительно друг друга, несущественен. (с другой стороны, порядок @xmath10 относительно @xmath9 важен, поскольку @xmath9 подключается только к тем @xmath10, которые появляются ранее в последовательности. ) затем, учитывая последовательность, можно изменить ее порядок, переместив все @xmath146 в конец списка. если мы теперь применим 2, @xmath52 и @xmath148, то получим тот же график, что и из исходной последовательности по правилу 3. то же самое относится к правилам и, которые являются вырожденными формами 6, 7 и 8 (или 6) соответственно. таким образом, у нас остается всего 15 различных правил с менее чем 5 связями. к ним следует добавить их дополнения, в общей сложности 30 различных трехбуквенных правил. обратите внимание на сходство,, и с двухбуквенными пороговыми сетями. кажется особенно симметричным обобщением, и мы сосредоточимся на нем в большей части нашего обсуждения ниже. хотя можно легко установить, связан граф или нет, апостериорно, с помощью алгоритма записи, который требует шагов @xmath149, полезно иметь правила быстрого доступа, которые с самого начала подсказывают нам, как избежать плохих последовательностей: зная, что двухбуквенные пороговые графики связаны тогда и только тогда, когда их последовательность заканчивается на @xmath10, что наиболее эффективно решает вопрос. аналогичные критерии существуют для графов трехбуквенных последовательностей, но они немного сложнее. например, трехбуквенные последовательности, интерпретируемые с помощью, приводят к связным графам тогда и только тогда, когда они удовлетворяют: _ ( 1 ) первый a и первый c в последовательности появляются перед последним b. ( 2 ) последовательность не начинается с b_. ( мы предполагаем, что последовательность содержит все три буквы. ) для 1 требования таковы: _ ( 1 ) первый a в последовательности должен появляться после первого b. ( 2 ) последний c в последовательности должен появляться перед последним b. ( 3 ) последний a в последовательности должен появляться после первого c, и должно быть по крайней мере, одна буква \"б\" между этими двумя. _ аналогичные критерии существуют для всех остальных трехбуквенных правил, и их можно найти путем проверки. структурные свойства сетей последовательностей из трех букв анализируются так же легко, как и свойства сетей последовательностей из двух букв, здесь мы перечисляем, в качестве примера, несколько основных атрибутов сетей последовательностей. мы используем обозначение, аналогичное обозначению раздела [ new_classes ].    : узлы @xmath9 и @xmath146 образуют полные подграфы, в то время как узлы @xmath10 соединяются со всеми предыдущими узлами @xmath9 и @xmath146. таким образом, степень узлов равна : @xmath150: поскольку узлы @xmath9 образуют подмножество полного графа @xmath151, и аналогично для @xmath146, @xmath152. узлы @xmath10 не соединяются между собой, но все они подключаются к узлам на первом уровне (который не состоит из узлов @xmath10), поэтому @xmath153. для расстояния узлов @xmath9 от @xmath10 у нас есть @xmath154, где @xmath155 - индекс первого @xmath9-слоя, а @xmath156 - индекс последнего @xmath10-слоя. первая строка следует за первой строкой, поскольку @xmath10 s напрямую связаны с предыдущими @xmath9 s и @xmath146 s. вторая, третья и четвертая строки проиллюстрированы на рис. [расстояние]a и b соответственно. расстояние @xmath157 соответствует той же схеме. наконец, проверяя все разные случаи, можно найти @xmath158 в сетях. ( a ) если @xmath159 и первый @xmath9 находятся ниже @xmath72, расстояние равно 2. ( b ) если первый @xmath9 находится выше @xmath72, то первый @xmath146 должен быть ниже (@xmath10 может начать последовательность); в этом случае, если @xmath71 находится ниже @xmath72, то первый @xmath146 должен быть ниже (@xmath10 может начать последовательность). в последнем @xmath10 расстояние равно 3, а в противном случае расстояние равно 4. показаны только соответствующие части полной сети.,scaledwidth=40,0% ] : мы не нашли очевидного способа вычисления собственных значений, несмотря на сходство между сетями и двухбуквенными пороговыми сетями. однако графики собственных значений в зависимости от алфавитного порядка сетей еще раз выявляют интригующие фрактальные закономерности, и можно надеяться, что их можно будет использовать, по крайней мере, для получения хороших оценок и приближений. на рис. [ r_r18 ] мы строим график соотношения @xmath160 для сетей с @xmath161 в соответствии с их алфавитным порядком. ось @xmath1 включает последовательности сетей, которые не подключены: в этом случае @xmath162 и синхронизация невозможны. эти случаи показаны в виде пробелов на графике, например, большой пробел в центре соответствует несвязанным последовательностям, начинающимся с буквы @xmath10 (см. раздел [ подключение ] ).     для сетей, состоящих из узлов @xmath161, в алфавитном порядке. обратите внимание на промежуток около центра, который соответствует последовательностям несвязанных графов. обратите также внимание на зеркальную симметрию это связано с зеркальной симметрией самого правила.,scaledwidth=40,0% ] некоторые из сетей последовательностей из трех букв могут быть сопоставлены с обобщенными формами пороговых сетей. например, следующая схема дает сеть с двумя пороговыми значениями, эквивалентную сетям с трехбуквенной последовательностью, сгенерированным правилом. пусть узлам будут присвоены веса @xmath163 из случайного распределения и соедините любые два узла @xmath4 и @xmath5, которые удовлетворяют @xmath164 или @xmath165. идентифицируя узлы с весом @xmath166 с @xmath9, узлы с @xmath167 с @xmath10 и узлы с @xmath168 с @xmath146, мы видим, что все @xmath9 подключаются друг к другу, и все @xmath146 подключаются друг к другу, но @xmath10 не подключаются, а @xmath9 и @xmath146 не подключаются; узлы типа @xmath9 и @xmath10 могут подключаться, а могут и не подключаться, и аналогично для узлов типа @xmath146 и @xmath10. чтобы отразить фактические соединения, узлы типа @xmath9 и @xmath10 могут быть расположены в последовательности в соответствии с алгоритмом в @xcite для порогового правила. также узлы типа @xmath146 и @xmath10 могут быть расположены в последовательности, отражающей фактические соединения, с использованием того же алгоритма. поскольку нет никаких связей между @xmath9 и @xmath146, два результата могут быть тривиально объединены. обратите внимание, однако, что как только последовательность @xmath9-@xmath10 установлена, порядок @xmath10 устанавливается, поэтому направление соединений между @xmath146 и @xmath10 ( @xmath169 или @xmath170 ) не является произвольным. в нашем примере отображение возможно, но не в. мы ввели новый класс сетей, сети последовательностей, полученные из последовательности букв и фиксированных правил связности. сети последовательностей из двух букв содержат пороговые сети и, кроме того, два недавно открытых класса. класс может быть сопоставлен с сетью \"порог разности\", где узлы @xmath4 и @xmath5 соединены, если разница их весов удовлетворяет @xmath143. этот тип сети может быть особенно хорошей моделью для социальных сетей, где весовые коэффициенты могут измерять политические пристрастия, экономический статус, количество потомков и т.д., и агенты склонны объединяться, когда они ближе по этим показателям. мы показали, что структурные свойства новых классов сетей последовательностей из двух букв могут быть легко проанализированы, и мы ввели упорядочение в ансамблях сетей последовательностей, которое полезно для визуализации и изучения их различных атрибутов. мы полностью классифицировали сети с трехбуквенными последовательностями и рассмотрели несколько примеров, показывающих, что их тоже можно просто проанализировать. диаметр последовательных сетей линейно растет с количеством букв в алфавите, и для алфавита из 3 букв он уже равен 3 или 4, что сопоставимо со многими сложными сетями повседневной жизни. реалистичных диаметров можно достичь при незначительном расширении алфавита. остается множество открытых вопросов: применяя аргументы симметрии, нам удалось сократить класс 3-буквенных сетей всего до 30 типов, но мы не исключили возможности того, что какая-то упущенная симметрия может еще больше сократить список; вопрос о том, какие последовательности приводят к связным сетям, может быть изучен путем проверки небольших алфавиты, но у нас нет комплексного подхода к решению этой проблемы. проблема в целом; мы показали, как сопоставлять сети последовательностей с обобщенными типами пороговых сетей, в некоторых случаях такое сопоставление всегда возможно? существует ли систематический способ найти такие сопоставления для любого правила последовательности? ; какие виды сетей получились бы, если бы правила подключения применялись только к предшествующим буквам @xmath50, а не ко всем предшествующим буквам? и т.д. мы надеемся ответить на некоторые из этих вопросов в будущей работе.

мы изучаем новый класс сетей, генерируемых последовательностями букв, взятых из конечного алфавита, состоящего из букв @xmath0 (соответствующих типам узлов @xmath0) и фиксированного набора правил подключения. недавно было показано, как двоичный алфавит может генерировать пороговые сети аналогичным образом [hagberg et al., phys. rev. e 74, 056116 ( 2006 ) ]. как и пороговые сети, сети последовательностей в целом обладают модульной структурой, напоминающей сети повседневной жизни, и просты в аналитическом обращении (т.е. вычислить распределение степеней, кратчайшие пути, центральность промежуточности и т.д.). Используя симметрию, мы проводим полную классификацию сетей последовательностей из двух и трех букв, открывая два новых класса сетей последовательностей из двух букв. новые сети последовательностей сохраняют многие желательные аналитические свойства пороговых сетей, предоставляя при этом более широкие возможности для более точного моделирования сложных сетей повседневной жизни.